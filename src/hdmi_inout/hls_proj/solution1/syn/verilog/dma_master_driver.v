// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dma_master_driver,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a200tsbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=1,HLS_SYN_FF=2018,HLS_SYN_LUT=6498,HLS_VERSION=2018_3}" *)

module dma_master_driver (
        ap_clk,
        ap_rst_n,
        m_axi_dma0_AWVALID,
        m_axi_dma0_AWREADY,
        m_axi_dma0_AWADDR,
        m_axi_dma0_AWID,
        m_axi_dma0_AWLEN,
        m_axi_dma0_AWSIZE,
        m_axi_dma0_AWBURST,
        m_axi_dma0_AWLOCK,
        m_axi_dma0_AWCACHE,
        m_axi_dma0_AWPROT,
        m_axi_dma0_AWQOS,
        m_axi_dma0_AWREGION,
        m_axi_dma0_AWUSER,
        m_axi_dma0_WVALID,
        m_axi_dma0_WREADY,
        m_axi_dma0_WDATA,
        m_axi_dma0_WSTRB,
        m_axi_dma0_WLAST,
        m_axi_dma0_WID,
        m_axi_dma0_WUSER,
        m_axi_dma0_ARVALID,
        m_axi_dma0_ARREADY,
        m_axi_dma0_ARADDR,
        m_axi_dma0_ARID,
        m_axi_dma0_ARLEN,
        m_axi_dma0_ARSIZE,
        m_axi_dma0_ARBURST,
        m_axi_dma0_ARLOCK,
        m_axi_dma0_ARCACHE,
        m_axi_dma0_ARPROT,
        m_axi_dma0_ARQOS,
        m_axi_dma0_ARREGION,
        m_axi_dma0_ARUSER,
        m_axi_dma0_RVALID,
        m_axi_dma0_RREADY,
        m_axi_dma0_RDATA,
        m_axi_dma0_RLAST,
        m_axi_dma0_RID,
        m_axi_dma0_RUSER,
        m_axi_dma0_RRESP,
        m_axi_dma0_BVALID,
        m_axi_dma0_BREADY,
        m_axi_dma0_BRESP,
        m_axi_dma0_BID,
        m_axi_dma0_BUSER,
        m_axi_dma1_AWVALID,
        m_axi_dma1_AWREADY,
        m_axi_dma1_AWADDR,
        m_axi_dma1_AWID,
        m_axi_dma1_AWLEN,
        m_axi_dma1_AWSIZE,
        m_axi_dma1_AWBURST,
        m_axi_dma1_AWLOCK,
        m_axi_dma1_AWCACHE,
        m_axi_dma1_AWPROT,
        m_axi_dma1_AWQOS,
        m_axi_dma1_AWREGION,
        m_axi_dma1_AWUSER,
        m_axi_dma1_WVALID,
        m_axi_dma1_WREADY,
        m_axi_dma1_WDATA,
        m_axi_dma1_WSTRB,
        m_axi_dma1_WLAST,
        m_axi_dma1_WID,
        m_axi_dma1_WUSER,
        m_axi_dma1_ARVALID,
        m_axi_dma1_ARREADY,
        m_axi_dma1_ARADDR,
        m_axi_dma1_ARID,
        m_axi_dma1_ARLEN,
        m_axi_dma1_ARSIZE,
        m_axi_dma1_ARBURST,
        m_axi_dma1_ARLOCK,
        m_axi_dma1_ARCACHE,
        m_axi_dma1_ARPROT,
        m_axi_dma1_ARQOS,
        m_axi_dma1_ARREGION,
        m_axi_dma1_ARUSER,
        m_axi_dma1_RVALID,
        m_axi_dma1_RREADY,
        m_axi_dma1_RDATA,
        m_axi_dma1_RLAST,
        m_axi_dma1_RID,
        m_axi_dma1_RUSER,
        m_axi_dma1_RRESP,
        m_axi_dma1_BVALID,
        m_axi_dma1_BREADY,
        m_axi_dma1_BRESP,
        m_axi_dma1_BID,
        m_axi_dma1_BUSER,
        frame_trigger_V
);

parameter    ap_ST_fsm_state1 = 27'd1;
parameter    ap_ST_fsm_state2 = 27'd2;
parameter    ap_ST_fsm_state3 = 27'd4;
parameter    ap_ST_fsm_state4 = 27'd8;
parameter    ap_ST_fsm_state5 = 27'd16;
parameter    ap_ST_fsm_state6 = 27'd32;
parameter    ap_ST_fsm_state7 = 27'd64;
parameter    ap_ST_fsm_state8 = 27'd128;
parameter    ap_ST_fsm_state9 = 27'd256;
parameter    ap_ST_fsm_state10 = 27'd512;
parameter    ap_ST_fsm_state11 = 27'd1024;
parameter    ap_ST_fsm_state12 = 27'd2048;
parameter    ap_ST_fsm_state13 = 27'd4096;
parameter    ap_ST_fsm_state14 = 27'd8192;
parameter    ap_ST_fsm_state15 = 27'd16384;
parameter    ap_ST_fsm_state16 = 27'd32768;
parameter    ap_ST_fsm_state17 = 27'd65536;
parameter    ap_ST_fsm_state18 = 27'd131072;
parameter    ap_ST_fsm_state19 = 27'd262144;
parameter    ap_ST_fsm_state20 = 27'd524288;
parameter    ap_ST_fsm_state21 = 27'd1048576;
parameter    ap_ST_fsm_state22 = 27'd2097152;
parameter    ap_ST_fsm_state23 = 27'd4194304;
parameter    ap_ST_fsm_state24 = 27'd8388608;
parameter    ap_ST_fsm_state25 = 27'd16777216;
parameter    ap_ST_fsm_state26 = 27'd33554432;
parameter    ap_ST_fsm_state27 = 27'd67108864;
parameter    C_M_AXI_DMA0_ID_WIDTH = 1;
parameter    C_M_AXI_DMA0_ADDR_WIDTH = 32;
parameter    C_M_AXI_DMA0_DATA_WIDTH = 32;
parameter    C_M_AXI_DMA0_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DMA0_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DMA0_WUSER_WIDTH = 1;
parameter    C_M_AXI_DMA0_RUSER_WIDTH = 1;
parameter    C_M_AXI_DMA0_BUSER_WIDTH = 1;
parameter    C_M_AXI_DMA0_TARGET_ADDR = 0;
parameter    C_M_AXI_DMA0_USER_VALUE = 0;
parameter    C_M_AXI_DMA0_PROT_VALUE = 0;
parameter    C_M_AXI_DMA0_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_DMA1_ID_WIDTH = 1;
parameter    C_M_AXI_DMA1_ADDR_WIDTH = 32;
parameter    C_M_AXI_DMA1_DATA_WIDTH = 32;
parameter    C_M_AXI_DMA1_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DMA1_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DMA1_WUSER_WIDTH = 1;
parameter    C_M_AXI_DMA1_RUSER_WIDTH = 1;
parameter    C_M_AXI_DMA1_BUSER_WIDTH = 1;
parameter    C_M_AXI_DMA1_TARGET_ADDR = 0;
parameter    C_M_AXI_DMA1_USER_VALUE = 0;
parameter    C_M_AXI_DMA1_PROT_VALUE = 0;
parameter    C_M_AXI_DMA1_CACHE_VALUE = 3;

parameter C_M_AXI_DMA0_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DMA1_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_dma0_AWVALID;
input   m_axi_dma0_AWREADY;
output  [C_M_AXI_DMA0_ADDR_WIDTH - 1:0] m_axi_dma0_AWADDR;
output  [C_M_AXI_DMA0_ID_WIDTH - 1:0] m_axi_dma0_AWID;
output  [7:0] m_axi_dma0_AWLEN;
output  [2:0] m_axi_dma0_AWSIZE;
output  [1:0] m_axi_dma0_AWBURST;
output  [1:0] m_axi_dma0_AWLOCK;
output  [3:0] m_axi_dma0_AWCACHE;
output  [2:0] m_axi_dma0_AWPROT;
output  [3:0] m_axi_dma0_AWQOS;
output  [3:0] m_axi_dma0_AWREGION;
output  [C_M_AXI_DMA0_AWUSER_WIDTH - 1:0] m_axi_dma0_AWUSER;
output   m_axi_dma0_WVALID;
input   m_axi_dma0_WREADY;
output  [C_M_AXI_DMA0_DATA_WIDTH - 1:0] m_axi_dma0_WDATA;
output  [C_M_AXI_DMA0_WSTRB_WIDTH - 1:0] m_axi_dma0_WSTRB;
output   m_axi_dma0_WLAST;
output  [C_M_AXI_DMA0_ID_WIDTH - 1:0] m_axi_dma0_WID;
output  [C_M_AXI_DMA0_WUSER_WIDTH - 1:0] m_axi_dma0_WUSER;
output   m_axi_dma0_ARVALID;
input   m_axi_dma0_ARREADY;
output  [C_M_AXI_DMA0_ADDR_WIDTH - 1:0] m_axi_dma0_ARADDR;
output  [C_M_AXI_DMA0_ID_WIDTH - 1:0] m_axi_dma0_ARID;
output  [7:0] m_axi_dma0_ARLEN;
output  [2:0] m_axi_dma0_ARSIZE;
output  [1:0] m_axi_dma0_ARBURST;
output  [1:0] m_axi_dma0_ARLOCK;
output  [3:0] m_axi_dma0_ARCACHE;
output  [2:0] m_axi_dma0_ARPROT;
output  [3:0] m_axi_dma0_ARQOS;
output  [3:0] m_axi_dma0_ARREGION;
output  [C_M_AXI_DMA0_ARUSER_WIDTH - 1:0] m_axi_dma0_ARUSER;
input   m_axi_dma0_RVALID;
output   m_axi_dma0_RREADY;
input  [C_M_AXI_DMA0_DATA_WIDTH - 1:0] m_axi_dma0_RDATA;
input   m_axi_dma0_RLAST;
input  [C_M_AXI_DMA0_ID_WIDTH - 1:0] m_axi_dma0_RID;
input  [C_M_AXI_DMA0_RUSER_WIDTH - 1:0] m_axi_dma0_RUSER;
input  [1:0] m_axi_dma0_RRESP;
input   m_axi_dma0_BVALID;
output   m_axi_dma0_BREADY;
input  [1:0] m_axi_dma0_BRESP;
input  [C_M_AXI_DMA0_ID_WIDTH - 1:0] m_axi_dma0_BID;
input  [C_M_AXI_DMA0_BUSER_WIDTH - 1:0] m_axi_dma0_BUSER;
output   m_axi_dma1_AWVALID;
input   m_axi_dma1_AWREADY;
output  [C_M_AXI_DMA1_ADDR_WIDTH - 1:0] m_axi_dma1_AWADDR;
output  [C_M_AXI_DMA1_ID_WIDTH - 1:0] m_axi_dma1_AWID;
output  [7:0] m_axi_dma1_AWLEN;
output  [2:0] m_axi_dma1_AWSIZE;
output  [1:0] m_axi_dma1_AWBURST;
output  [1:0] m_axi_dma1_AWLOCK;
output  [3:0] m_axi_dma1_AWCACHE;
output  [2:0] m_axi_dma1_AWPROT;
output  [3:0] m_axi_dma1_AWQOS;
output  [3:0] m_axi_dma1_AWREGION;
output  [C_M_AXI_DMA1_AWUSER_WIDTH - 1:0] m_axi_dma1_AWUSER;
output   m_axi_dma1_WVALID;
input   m_axi_dma1_WREADY;
output  [C_M_AXI_DMA1_DATA_WIDTH - 1:0] m_axi_dma1_WDATA;
output  [C_M_AXI_DMA1_WSTRB_WIDTH - 1:0] m_axi_dma1_WSTRB;
output   m_axi_dma1_WLAST;
output  [C_M_AXI_DMA1_ID_WIDTH - 1:0] m_axi_dma1_WID;
output  [C_M_AXI_DMA1_WUSER_WIDTH - 1:0] m_axi_dma1_WUSER;
output   m_axi_dma1_ARVALID;
input   m_axi_dma1_ARREADY;
output  [C_M_AXI_DMA1_ADDR_WIDTH - 1:0] m_axi_dma1_ARADDR;
output  [C_M_AXI_DMA1_ID_WIDTH - 1:0] m_axi_dma1_ARID;
output  [7:0] m_axi_dma1_ARLEN;
output  [2:0] m_axi_dma1_ARSIZE;
output  [1:0] m_axi_dma1_ARBURST;
output  [1:0] m_axi_dma1_ARLOCK;
output  [3:0] m_axi_dma1_ARCACHE;
output  [2:0] m_axi_dma1_ARPROT;
output  [3:0] m_axi_dma1_ARQOS;
output  [3:0] m_axi_dma1_ARREGION;
output  [C_M_AXI_DMA1_ARUSER_WIDTH - 1:0] m_axi_dma1_ARUSER;
input   m_axi_dma1_RVALID;
output   m_axi_dma1_RREADY;
input  [C_M_AXI_DMA1_DATA_WIDTH - 1:0] m_axi_dma1_RDATA;
input   m_axi_dma1_RLAST;
input  [C_M_AXI_DMA1_ID_WIDTH - 1:0] m_axi_dma1_RID;
input  [C_M_AXI_DMA1_RUSER_WIDTH - 1:0] m_axi_dma1_RUSER;
input  [1:0] m_axi_dma1_RRESP;
input   m_axi_dma1_BVALID;
output   m_axi_dma1_BREADY;
input  [1:0] m_axi_dma1_BRESP;
input  [C_M_AXI_DMA1_ID_WIDTH - 1:0] m_axi_dma1_BID;
input  [C_M_AXI_DMA1_BUSER_WIDTH - 1:0] m_axi_dma1_BUSER;
input  [0:0] frame_trigger_V;

 reg    ap_rst_n_inv;
reg    dma0_AWVALID;
wire    dma0_AWREADY;
reg   [31:0] dma0_AWADDR;
reg   [0:0] dma0_AWID;
reg   [31:0] dma0_AWLEN;
reg   [2:0] dma0_AWSIZE;
reg   [1:0] dma0_AWBURST;
reg   [1:0] dma0_AWLOCK;
reg   [3:0] dma0_AWCACHE;
reg   [2:0] dma0_AWPROT;
reg   [3:0] dma0_AWQOS;
reg   [3:0] dma0_AWREGION;
reg   [0:0] dma0_AWUSER;
reg    dma0_WVALID;
wire    dma0_WREADY;
reg   [31:0] dma0_WDATA;
reg   [3:0] dma0_WSTRB;
reg    dma0_WLAST;
reg   [0:0] dma0_WID;
reg   [0:0] dma0_WUSER;
reg    dma0_ARVALID;
wire    dma0_ARREADY;
reg   [31:0] dma0_ARADDR;
reg   [0:0] dma0_ARID;
reg   [31:0] dma0_ARLEN;
reg   [2:0] dma0_ARSIZE;
reg   [1:0] dma0_ARBURST;
reg   [1:0] dma0_ARLOCK;
reg   [3:0] dma0_ARCACHE;
reg   [2:0] dma0_ARPROT;
reg   [3:0] dma0_ARQOS;
reg   [3:0] dma0_ARREGION;
reg   [0:0] dma0_ARUSER;
wire    dma0_RVALID;
reg    dma0_RREADY;
wire   [31:0] dma0_RDATA;
wire    dma0_RLAST;
wire   [0:0] dma0_RID;
wire   [0:0] dma0_RUSER;
wire   [1:0] dma0_RRESP;
wire    dma0_BVALID;
reg    dma0_BREADY;
wire   [1:0] dma0_BRESP;
wire   [0:0] dma0_BID;
wire   [0:0] dma0_BUSER;
wire   [0:0] frame_trigger_V_read_read_fu_70_p2;
(* fsm_encoding = "none" *) reg   [26:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [9:0] chunk_ctr_1_fu_114_p2;
reg   [9:0] chunk_ctr_1_reg_175;
wire    ap_CS_fsm_state3;
wire   [17:0] tmp_fu_120_p3;
wire   [0:0] exitcond_fu_108_p2;
reg   [7:0] tmp_1_reg_185;
wire   [9:0] input_row_fu_147_p3;
reg   [9:0] input_row_reg_190;
wire    ap_CS_fsm_state24;
wire   [10:0] tmp_2_fu_155_p1;
reg   [10:0] tmp_2_reg_196;
wire    grp_transfer_chunk_1_fu_87_ap_start;
wire    grp_transfer_chunk_1_fu_87_ap_done;
wire    grp_transfer_chunk_1_fu_87_ap_idle;
wire    grp_transfer_chunk_1_fu_87_ap_ready;
wire    grp_transfer_chunk_1_fu_87_m_axi_dma_AWVALID;
wire   [31:0] grp_transfer_chunk_1_fu_87_m_axi_dma_AWADDR;
wire   [0:0] grp_transfer_chunk_1_fu_87_m_axi_dma_AWID;
wire   [31:0] grp_transfer_chunk_1_fu_87_m_axi_dma_AWLEN;
wire   [2:0] grp_transfer_chunk_1_fu_87_m_axi_dma_AWSIZE;
wire   [1:0] grp_transfer_chunk_1_fu_87_m_axi_dma_AWBURST;
wire   [1:0] grp_transfer_chunk_1_fu_87_m_axi_dma_AWLOCK;
wire   [3:0] grp_transfer_chunk_1_fu_87_m_axi_dma_AWCACHE;
wire   [2:0] grp_transfer_chunk_1_fu_87_m_axi_dma_AWPROT;
wire   [3:0] grp_transfer_chunk_1_fu_87_m_axi_dma_AWQOS;
wire   [3:0] grp_transfer_chunk_1_fu_87_m_axi_dma_AWREGION;
wire   [0:0] grp_transfer_chunk_1_fu_87_m_axi_dma_AWUSER;
wire    grp_transfer_chunk_1_fu_87_m_axi_dma_WVALID;
wire   [31:0] grp_transfer_chunk_1_fu_87_m_axi_dma_WDATA;
wire   [3:0] grp_transfer_chunk_1_fu_87_m_axi_dma_WSTRB;
wire    grp_transfer_chunk_1_fu_87_m_axi_dma_WLAST;
wire   [0:0] grp_transfer_chunk_1_fu_87_m_axi_dma_WID;
wire   [0:0] grp_transfer_chunk_1_fu_87_m_axi_dma_WUSER;
wire    grp_transfer_chunk_1_fu_87_m_axi_dma_ARVALID;
wire   [31:0] grp_transfer_chunk_1_fu_87_m_axi_dma_ARADDR;
wire   [0:0] grp_transfer_chunk_1_fu_87_m_axi_dma_ARID;
wire   [31:0] grp_transfer_chunk_1_fu_87_m_axi_dma_ARLEN;
wire   [2:0] grp_transfer_chunk_1_fu_87_m_axi_dma_ARSIZE;
wire   [1:0] grp_transfer_chunk_1_fu_87_m_axi_dma_ARBURST;
wire   [1:0] grp_transfer_chunk_1_fu_87_m_axi_dma_ARLOCK;
wire   [3:0] grp_transfer_chunk_1_fu_87_m_axi_dma_ARCACHE;
wire   [2:0] grp_transfer_chunk_1_fu_87_m_axi_dma_ARPROT;
wire   [3:0] grp_transfer_chunk_1_fu_87_m_axi_dma_ARQOS;
wire   [3:0] grp_transfer_chunk_1_fu_87_m_axi_dma_ARREGION;
wire   [0:0] grp_transfer_chunk_1_fu_87_m_axi_dma_ARUSER;
wire    grp_transfer_chunk_1_fu_87_m_axi_dma_RREADY;
wire    grp_transfer_chunk_1_fu_87_m_axi_dma_BREADY;
wire    grp_transfer_chunk_fu_95_ap_start;
wire    grp_transfer_chunk_fu_95_ap_done;
wire    grp_transfer_chunk_fu_95_ap_idle;
wire    grp_transfer_chunk_fu_95_ap_ready;
wire    grp_transfer_chunk_fu_95_m_axi_dma_AWVALID;
wire   [31:0] grp_transfer_chunk_fu_95_m_axi_dma_AWADDR;
wire   [0:0] grp_transfer_chunk_fu_95_m_axi_dma_AWID;
wire   [31:0] grp_transfer_chunk_fu_95_m_axi_dma_AWLEN;
wire   [2:0] grp_transfer_chunk_fu_95_m_axi_dma_AWSIZE;
wire   [1:0] grp_transfer_chunk_fu_95_m_axi_dma_AWBURST;
wire   [1:0] grp_transfer_chunk_fu_95_m_axi_dma_AWLOCK;
wire   [3:0] grp_transfer_chunk_fu_95_m_axi_dma_AWCACHE;
wire   [2:0] grp_transfer_chunk_fu_95_m_axi_dma_AWPROT;
wire   [3:0] grp_transfer_chunk_fu_95_m_axi_dma_AWQOS;
wire   [3:0] grp_transfer_chunk_fu_95_m_axi_dma_AWREGION;
wire   [0:0] grp_transfer_chunk_fu_95_m_axi_dma_AWUSER;
wire    grp_transfer_chunk_fu_95_m_axi_dma_WVALID;
wire   [31:0] grp_transfer_chunk_fu_95_m_axi_dma_WDATA;
wire   [3:0] grp_transfer_chunk_fu_95_m_axi_dma_WSTRB;
wire    grp_transfer_chunk_fu_95_m_axi_dma_WLAST;
wire   [0:0] grp_transfer_chunk_fu_95_m_axi_dma_WID;
wire   [0:0] grp_transfer_chunk_fu_95_m_axi_dma_WUSER;
wire    grp_transfer_chunk_fu_95_m_axi_dma_ARVALID;
wire   [31:0] grp_transfer_chunk_fu_95_m_axi_dma_ARADDR;
wire   [0:0] grp_transfer_chunk_fu_95_m_axi_dma_ARID;
wire   [31:0] grp_transfer_chunk_fu_95_m_axi_dma_ARLEN;
wire   [2:0] grp_transfer_chunk_fu_95_m_axi_dma_ARSIZE;
wire   [1:0] grp_transfer_chunk_fu_95_m_axi_dma_ARBURST;
wire   [1:0] grp_transfer_chunk_fu_95_m_axi_dma_ARLOCK;
wire   [3:0] grp_transfer_chunk_fu_95_m_axi_dma_ARCACHE;
wire   [2:0] grp_transfer_chunk_fu_95_m_axi_dma_ARPROT;
wire   [3:0] grp_transfer_chunk_fu_95_m_axi_dma_ARQOS;
wire   [3:0] grp_transfer_chunk_fu_95_m_axi_dma_ARREGION;
wire   [0:0] grp_transfer_chunk_fu_95_m_axi_dma_ARUSER;
wire    grp_transfer_chunk_fu_95_m_axi_dma_RREADY;
wire    grp_transfer_chunk_fu_95_m_axi_dma_BREADY;
reg   [9:0] chunk_ctr_reg_76;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state27;
reg    grp_transfer_chunk_1_fu_87_ap_start_reg;
wire    ap_CS_fsm_state25;
reg    grp_transfer_chunk_fu_95_ap_start_reg;
wire    ap_CS_fsm_state26;
wire   [37:0] mul_fu_160_p2;
wire   [11:0] grp_fu_141_p1;
wire   [10:0] grp_fu_141_p2;
wire   [19:0] mul_fu_160_p0;
wire   [17:0] mul_fu_160_p1;
reg    grp_fu_141_ap_start;
wire    grp_fu_141_ap_done;
reg   [26:0] ap_NS_fsm;
wire   [37:0] mul_fu_160_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 27'd1;
#0 grp_transfer_chunk_1_fu_87_ap_start_reg = 1'b0;
#0 grp_transfer_chunk_fu_95_ap_start_reg = 1'b0;
end

dma_master_driver_dma0_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DMA0_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DMA0_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DMA0_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DMA0_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DMA0_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DMA0_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DMA0_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DMA0_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_DMA0_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_DMA0_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DMA0_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DMA0_CACHE_VALUE ))
dma_master_driver_dma0_m_axi_U(
    .AWVALID(m_axi_dma0_AWVALID),
    .AWREADY(m_axi_dma0_AWREADY),
    .AWADDR(m_axi_dma0_AWADDR),
    .AWID(m_axi_dma0_AWID),
    .AWLEN(m_axi_dma0_AWLEN),
    .AWSIZE(m_axi_dma0_AWSIZE),
    .AWBURST(m_axi_dma0_AWBURST),
    .AWLOCK(m_axi_dma0_AWLOCK),
    .AWCACHE(m_axi_dma0_AWCACHE),
    .AWPROT(m_axi_dma0_AWPROT),
    .AWQOS(m_axi_dma0_AWQOS),
    .AWREGION(m_axi_dma0_AWREGION),
    .AWUSER(m_axi_dma0_AWUSER),
    .WVALID(m_axi_dma0_WVALID),
    .WREADY(m_axi_dma0_WREADY),
    .WDATA(m_axi_dma0_WDATA),
    .WSTRB(m_axi_dma0_WSTRB),
    .WLAST(m_axi_dma0_WLAST),
    .WID(m_axi_dma0_WID),
    .WUSER(m_axi_dma0_WUSER),
    .ARVALID(m_axi_dma0_ARVALID),
    .ARREADY(m_axi_dma0_ARREADY),
    .ARADDR(m_axi_dma0_ARADDR),
    .ARID(m_axi_dma0_ARID),
    .ARLEN(m_axi_dma0_ARLEN),
    .ARSIZE(m_axi_dma0_ARSIZE),
    .ARBURST(m_axi_dma0_ARBURST),
    .ARLOCK(m_axi_dma0_ARLOCK),
    .ARCACHE(m_axi_dma0_ARCACHE),
    .ARPROT(m_axi_dma0_ARPROT),
    .ARQOS(m_axi_dma0_ARQOS),
    .ARREGION(m_axi_dma0_ARREGION),
    .ARUSER(m_axi_dma0_ARUSER),
    .RVALID(m_axi_dma0_RVALID),
    .RREADY(m_axi_dma0_RREADY),
    .RDATA(m_axi_dma0_RDATA),
    .RLAST(m_axi_dma0_RLAST),
    .RID(m_axi_dma0_RID),
    .RUSER(m_axi_dma0_RUSER),
    .RRESP(m_axi_dma0_RRESP),
    .BVALID(m_axi_dma0_BVALID),
    .BREADY(m_axi_dma0_BREADY),
    .BRESP(m_axi_dma0_BRESP),
    .BID(m_axi_dma0_BID),
    .BUSER(m_axi_dma0_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(dma0_ARVALID),
    .I_ARREADY(dma0_ARREADY),
    .I_ARADDR(dma0_ARADDR),
    .I_ARID(dma0_ARID),
    .I_ARLEN(dma0_ARLEN),
    .I_ARSIZE(dma0_ARSIZE),
    .I_ARLOCK(dma0_ARLOCK),
    .I_ARCACHE(dma0_ARCACHE),
    .I_ARQOS(dma0_ARQOS),
    .I_ARPROT(dma0_ARPROT),
    .I_ARUSER(dma0_ARUSER),
    .I_ARBURST(dma0_ARBURST),
    .I_ARREGION(dma0_ARREGION),
    .I_RVALID(dma0_RVALID),
    .I_RREADY(dma0_RREADY),
    .I_RDATA(dma0_RDATA),
    .I_RID(dma0_RID),
    .I_RUSER(dma0_RUSER),
    .I_RRESP(dma0_RRESP),
    .I_RLAST(dma0_RLAST),
    .I_AWVALID(dma0_AWVALID),
    .I_AWREADY(dma0_AWREADY),
    .I_AWADDR(dma0_AWADDR),
    .I_AWID(dma0_AWID),
    .I_AWLEN(dma0_AWLEN),
    .I_AWSIZE(dma0_AWSIZE),
    .I_AWLOCK(dma0_AWLOCK),
    .I_AWCACHE(dma0_AWCACHE),
    .I_AWQOS(dma0_AWQOS),
    .I_AWPROT(dma0_AWPROT),
    .I_AWUSER(dma0_AWUSER),
    .I_AWBURST(dma0_AWBURST),
    .I_AWREGION(dma0_AWREGION),
    .I_WVALID(dma0_WVALID),
    .I_WREADY(dma0_WREADY),
    .I_WDATA(dma0_WDATA),
    .I_WID(dma0_WID),
    .I_WUSER(dma0_WUSER),
    .I_WLAST(dma0_WLAST),
    .I_WSTRB(dma0_WSTRB),
    .I_BVALID(dma0_BVALID),
    .I_BREADY(dma0_BREADY),
    .I_BRESP(dma0_BRESP),
    .I_BID(dma0_BID),
    .I_BUSER(dma0_BUSER)
);

transfer_chunk_1 grp_transfer_chunk_1_fu_87(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_transfer_chunk_1_fu_87_ap_start),
    .ap_done(grp_transfer_chunk_1_fu_87_ap_done),
    .ap_idle(grp_transfer_chunk_1_fu_87_ap_idle),
    .ap_ready(grp_transfer_chunk_1_fu_87_ap_ready),
    .m_axi_dma_AWVALID(grp_transfer_chunk_1_fu_87_m_axi_dma_AWVALID),
    .m_axi_dma_AWREADY(dma0_AWREADY),
    .m_axi_dma_AWADDR(grp_transfer_chunk_1_fu_87_m_axi_dma_AWADDR),
    .m_axi_dma_AWID(grp_transfer_chunk_1_fu_87_m_axi_dma_AWID),
    .m_axi_dma_AWLEN(grp_transfer_chunk_1_fu_87_m_axi_dma_AWLEN),
    .m_axi_dma_AWSIZE(grp_transfer_chunk_1_fu_87_m_axi_dma_AWSIZE),
    .m_axi_dma_AWBURST(grp_transfer_chunk_1_fu_87_m_axi_dma_AWBURST),
    .m_axi_dma_AWLOCK(grp_transfer_chunk_1_fu_87_m_axi_dma_AWLOCK),
    .m_axi_dma_AWCACHE(grp_transfer_chunk_1_fu_87_m_axi_dma_AWCACHE),
    .m_axi_dma_AWPROT(grp_transfer_chunk_1_fu_87_m_axi_dma_AWPROT),
    .m_axi_dma_AWQOS(grp_transfer_chunk_1_fu_87_m_axi_dma_AWQOS),
    .m_axi_dma_AWREGION(grp_transfer_chunk_1_fu_87_m_axi_dma_AWREGION),
    .m_axi_dma_AWUSER(grp_transfer_chunk_1_fu_87_m_axi_dma_AWUSER),
    .m_axi_dma_WVALID(grp_transfer_chunk_1_fu_87_m_axi_dma_WVALID),
    .m_axi_dma_WREADY(dma0_WREADY),
    .m_axi_dma_WDATA(grp_transfer_chunk_1_fu_87_m_axi_dma_WDATA),
    .m_axi_dma_WSTRB(grp_transfer_chunk_1_fu_87_m_axi_dma_WSTRB),
    .m_axi_dma_WLAST(grp_transfer_chunk_1_fu_87_m_axi_dma_WLAST),
    .m_axi_dma_WID(grp_transfer_chunk_1_fu_87_m_axi_dma_WID),
    .m_axi_dma_WUSER(grp_transfer_chunk_1_fu_87_m_axi_dma_WUSER),
    .m_axi_dma_ARVALID(grp_transfer_chunk_1_fu_87_m_axi_dma_ARVALID),
    .m_axi_dma_ARREADY(dma0_ARREADY),
    .m_axi_dma_ARADDR(grp_transfer_chunk_1_fu_87_m_axi_dma_ARADDR),
    .m_axi_dma_ARID(grp_transfer_chunk_1_fu_87_m_axi_dma_ARID),
    .m_axi_dma_ARLEN(grp_transfer_chunk_1_fu_87_m_axi_dma_ARLEN),
    .m_axi_dma_ARSIZE(grp_transfer_chunk_1_fu_87_m_axi_dma_ARSIZE),
    .m_axi_dma_ARBURST(grp_transfer_chunk_1_fu_87_m_axi_dma_ARBURST),
    .m_axi_dma_ARLOCK(grp_transfer_chunk_1_fu_87_m_axi_dma_ARLOCK),
    .m_axi_dma_ARCACHE(grp_transfer_chunk_1_fu_87_m_axi_dma_ARCACHE),
    .m_axi_dma_ARPROT(grp_transfer_chunk_1_fu_87_m_axi_dma_ARPROT),
    .m_axi_dma_ARQOS(grp_transfer_chunk_1_fu_87_m_axi_dma_ARQOS),
    .m_axi_dma_ARREGION(grp_transfer_chunk_1_fu_87_m_axi_dma_ARREGION),
    .m_axi_dma_ARUSER(grp_transfer_chunk_1_fu_87_m_axi_dma_ARUSER),
    .m_axi_dma_RVALID(dma0_RVALID),
    .m_axi_dma_RREADY(grp_transfer_chunk_1_fu_87_m_axi_dma_RREADY),
    .m_axi_dma_RDATA(dma0_RDATA),
    .m_axi_dma_RLAST(dma0_RLAST),
    .m_axi_dma_RID(dma0_RID),
    .m_axi_dma_RUSER(dma0_RUSER),
    .m_axi_dma_RRESP(dma0_RRESP),
    .m_axi_dma_BVALID(dma0_BVALID),
    .m_axi_dma_BREADY(grp_transfer_chunk_1_fu_87_m_axi_dma_BREADY),
    .m_axi_dma_BRESP(dma0_BRESP),
    .m_axi_dma_BID(dma0_BID),
    .m_axi_dma_BUSER(dma0_BUSER),
    .row(input_row_reg_190),
    .col(tmp_2_reg_196)
);

transfer_chunk grp_transfer_chunk_fu_95(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_transfer_chunk_fu_95_ap_start),
    .ap_done(grp_transfer_chunk_fu_95_ap_done),
    .ap_idle(grp_transfer_chunk_fu_95_ap_idle),
    .ap_ready(grp_transfer_chunk_fu_95_ap_ready),
    .m_axi_dma_AWVALID(grp_transfer_chunk_fu_95_m_axi_dma_AWVALID),
    .m_axi_dma_AWREADY(dma0_AWREADY),
    .m_axi_dma_AWADDR(grp_transfer_chunk_fu_95_m_axi_dma_AWADDR),
    .m_axi_dma_AWID(grp_transfer_chunk_fu_95_m_axi_dma_AWID),
    .m_axi_dma_AWLEN(grp_transfer_chunk_fu_95_m_axi_dma_AWLEN),
    .m_axi_dma_AWSIZE(grp_transfer_chunk_fu_95_m_axi_dma_AWSIZE),
    .m_axi_dma_AWBURST(grp_transfer_chunk_fu_95_m_axi_dma_AWBURST),
    .m_axi_dma_AWLOCK(grp_transfer_chunk_fu_95_m_axi_dma_AWLOCK),
    .m_axi_dma_AWCACHE(grp_transfer_chunk_fu_95_m_axi_dma_AWCACHE),
    .m_axi_dma_AWPROT(grp_transfer_chunk_fu_95_m_axi_dma_AWPROT),
    .m_axi_dma_AWQOS(grp_transfer_chunk_fu_95_m_axi_dma_AWQOS),
    .m_axi_dma_AWREGION(grp_transfer_chunk_fu_95_m_axi_dma_AWREGION),
    .m_axi_dma_AWUSER(grp_transfer_chunk_fu_95_m_axi_dma_AWUSER),
    .m_axi_dma_WVALID(grp_transfer_chunk_fu_95_m_axi_dma_WVALID),
    .m_axi_dma_WREADY(dma0_WREADY),
    .m_axi_dma_WDATA(grp_transfer_chunk_fu_95_m_axi_dma_WDATA),
    .m_axi_dma_WSTRB(grp_transfer_chunk_fu_95_m_axi_dma_WSTRB),
    .m_axi_dma_WLAST(grp_transfer_chunk_fu_95_m_axi_dma_WLAST),
    .m_axi_dma_WID(grp_transfer_chunk_fu_95_m_axi_dma_WID),
    .m_axi_dma_WUSER(grp_transfer_chunk_fu_95_m_axi_dma_WUSER),
    .m_axi_dma_ARVALID(grp_transfer_chunk_fu_95_m_axi_dma_ARVALID),
    .m_axi_dma_ARREADY(dma0_ARREADY),
    .m_axi_dma_ARADDR(grp_transfer_chunk_fu_95_m_axi_dma_ARADDR),
    .m_axi_dma_ARID(grp_transfer_chunk_fu_95_m_axi_dma_ARID),
    .m_axi_dma_ARLEN(grp_transfer_chunk_fu_95_m_axi_dma_ARLEN),
    .m_axi_dma_ARSIZE(grp_transfer_chunk_fu_95_m_axi_dma_ARSIZE),
    .m_axi_dma_ARBURST(grp_transfer_chunk_fu_95_m_axi_dma_ARBURST),
    .m_axi_dma_ARLOCK(grp_transfer_chunk_fu_95_m_axi_dma_ARLOCK),
    .m_axi_dma_ARCACHE(grp_transfer_chunk_fu_95_m_axi_dma_ARCACHE),
    .m_axi_dma_ARPROT(grp_transfer_chunk_fu_95_m_axi_dma_ARPROT),
    .m_axi_dma_ARQOS(grp_transfer_chunk_fu_95_m_axi_dma_ARQOS),
    .m_axi_dma_ARREGION(grp_transfer_chunk_fu_95_m_axi_dma_ARREGION),
    .m_axi_dma_ARUSER(grp_transfer_chunk_fu_95_m_axi_dma_ARUSER),
    .m_axi_dma_RVALID(dma0_RVALID),
    .m_axi_dma_RREADY(grp_transfer_chunk_fu_95_m_axi_dma_RREADY),
    .m_axi_dma_RDATA(dma0_RDATA),
    .m_axi_dma_RLAST(dma0_RLAST),
    .m_axi_dma_RID(dma0_RID),
    .m_axi_dma_RUSER(dma0_RUSER),
    .m_axi_dma_RRESP(dma0_RRESP),
    .m_axi_dma_BVALID(dma0_BVALID),
    .m_axi_dma_BREADY(grp_transfer_chunk_fu_95_m_axi_dma_BREADY),
    .m_axi_dma_BRESP(dma0_BRESP),
    .m_axi_dma_BID(dma0_BID),
    .m_axi_dma_BUSER(dma0_BUSER),
    .row(input_row_reg_190),
    .col(tmp_2_reg_196)
);

dma_master_driverbkb #(
    .ID( 1 ),
    .NUM_STAGE( 22 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 11 ))
dma_master_driverbkb_U11(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_141_ap_start),
    .done(grp_fu_141_ap_done),
    .din0(tmp_fu_120_p3),
    .din1(grp_fu_141_p1),
    .ce(1'b1),
    .dout(grp_fu_141_p2)
);

dma_master_drivercud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 38 ))
dma_master_drivercud_U12(
    .din0(mul_fu_160_p0),
    .din1(mul_fu_160_p1),
    .dout(mul_fu_160_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_transfer_chunk_1_fu_87_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state24)) begin
            grp_transfer_chunk_1_fu_87_ap_start_reg <= 1'b1;
        end else if ((grp_transfer_chunk_1_fu_87_ap_ready == 1'b1)) begin
            grp_transfer_chunk_1_fu_87_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_transfer_chunk_fu_95_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state26)) begin
            grp_transfer_chunk_fu_95_ap_start_reg <= 1'b1;
        end else if ((grp_transfer_chunk_fu_95_ap_ready == 1'b1)) begin
            grp_transfer_chunk_fu_95_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((grp_transfer_chunk_fu_95_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
        chunk_ctr_reg_76 <= chunk_ctr_1_reg_175;
    end else if ((~(frame_trigger_V_read_read_fu_70_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        chunk_ctr_reg_76 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        chunk_ctr_1_reg_175 <= chunk_ctr_1_fu_114_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        input_row_reg_190[9 : 2] <= input_row_fu_147_p3[9 : 2];
        tmp_2_reg_196 <= tmp_2_fu_155_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_108_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_1_reg_185 <= {{mul_fu_160_p2[36:29]}};
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27))) begin
        dma0_ARADDR = grp_transfer_chunk_fu_95_m_axi_dma_ARADDR;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24))) begin
        dma0_ARADDR = grp_transfer_chunk_1_fu_87_m_axi_dma_ARADDR;
    end else begin
        dma0_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27))) begin
        dma0_ARBURST = grp_transfer_chunk_fu_95_m_axi_dma_ARBURST;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24))) begin
        dma0_ARBURST = grp_transfer_chunk_1_fu_87_m_axi_dma_ARBURST;
    end else begin
        dma0_ARBURST = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27))) begin
        dma0_ARCACHE = grp_transfer_chunk_fu_95_m_axi_dma_ARCACHE;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24))) begin
        dma0_ARCACHE = grp_transfer_chunk_1_fu_87_m_axi_dma_ARCACHE;
    end else begin
        dma0_ARCACHE = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27))) begin
        dma0_ARID = grp_transfer_chunk_fu_95_m_axi_dma_ARID;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24))) begin
        dma0_ARID = grp_transfer_chunk_1_fu_87_m_axi_dma_ARID;
    end else begin
        dma0_ARID = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27))) begin
        dma0_ARLEN = grp_transfer_chunk_fu_95_m_axi_dma_ARLEN;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24))) begin
        dma0_ARLEN = grp_transfer_chunk_1_fu_87_m_axi_dma_ARLEN;
    end else begin
        dma0_ARLEN = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27))) begin
        dma0_ARLOCK = grp_transfer_chunk_fu_95_m_axi_dma_ARLOCK;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24))) begin
        dma0_ARLOCK = grp_transfer_chunk_1_fu_87_m_axi_dma_ARLOCK;
    end else begin
        dma0_ARLOCK = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27))) begin
        dma0_ARPROT = grp_transfer_chunk_fu_95_m_axi_dma_ARPROT;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24))) begin
        dma0_ARPROT = grp_transfer_chunk_1_fu_87_m_axi_dma_ARPROT;
    end else begin
        dma0_ARPROT = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27))) begin
        dma0_ARQOS = grp_transfer_chunk_fu_95_m_axi_dma_ARQOS;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24))) begin
        dma0_ARQOS = grp_transfer_chunk_1_fu_87_m_axi_dma_ARQOS;
    end else begin
        dma0_ARQOS = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27))) begin
        dma0_ARREGION = grp_transfer_chunk_fu_95_m_axi_dma_ARREGION;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24))) begin
        dma0_ARREGION = grp_transfer_chunk_1_fu_87_m_axi_dma_ARREGION;
    end else begin
        dma0_ARREGION = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27))) begin
        dma0_ARSIZE = grp_transfer_chunk_fu_95_m_axi_dma_ARSIZE;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24))) begin
        dma0_ARSIZE = grp_transfer_chunk_1_fu_87_m_axi_dma_ARSIZE;
    end else begin
        dma0_ARSIZE = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27))) begin
        dma0_ARUSER = grp_transfer_chunk_fu_95_m_axi_dma_ARUSER;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24))) begin
        dma0_ARUSER = grp_transfer_chunk_1_fu_87_m_axi_dma_ARUSER;
    end else begin
        dma0_ARUSER = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27))) begin
        dma0_ARVALID = grp_transfer_chunk_fu_95_m_axi_dma_ARVALID;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24))) begin
        dma0_ARVALID = grp_transfer_chunk_1_fu_87_m_axi_dma_ARVALID;
    end else begin
        dma0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27))) begin
        dma0_AWADDR = grp_transfer_chunk_fu_95_m_axi_dma_AWADDR;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24))) begin
        dma0_AWADDR = grp_transfer_chunk_1_fu_87_m_axi_dma_AWADDR;
    end else begin
        dma0_AWADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27))) begin
        dma0_AWBURST = grp_transfer_chunk_fu_95_m_axi_dma_AWBURST;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24))) begin
        dma0_AWBURST = grp_transfer_chunk_1_fu_87_m_axi_dma_AWBURST;
    end else begin
        dma0_AWBURST = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27))) begin
        dma0_AWCACHE = grp_transfer_chunk_fu_95_m_axi_dma_AWCACHE;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24))) begin
        dma0_AWCACHE = grp_transfer_chunk_1_fu_87_m_axi_dma_AWCACHE;
    end else begin
        dma0_AWCACHE = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27))) begin
        dma0_AWID = grp_transfer_chunk_fu_95_m_axi_dma_AWID;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24))) begin
        dma0_AWID = grp_transfer_chunk_1_fu_87_m_axi_dma_AWID;
    end else begin
        dma0_AWID = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27))) begin
        dma0_AWLEN = grp_transfer_chunk_fu_95_m_axi_dma_AWLEN;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24))) begin
        dma0_AWLEN = grp_transfer_chunk_1_fu_87_m_axi_dma_AWLEN;
    end else begin
        dma0_AWLEN = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27))) begin
        dma0_AWLOCK = grp_transfer_chunk_fu_95_m_axi_dma_AWLOCK;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24))) begin
        dma0_AWLOCK = grp_transfer_chunk_1_fu_87_m_axi_dma_AWLOCK;
    end else begin
        dma0_AWLOCK = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27))) begin
        dma0_AWPROT = grp_transfer_chunk_fu_95_m_axi_dma_AWPROT;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24))) begin
        dma0_AWPROT = grp_transfer_chunk_1_fu_87_m_axi_dma_AWPROT;
    end else begin
        dma0_AWPROT = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27))) begin
        dma0_AWQOS = grp_transfer_chunk_fu_95_m_axi_dma_AWQOS;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24))) begin
        dma0_AWQOS = grp_transfer_chunk_1_fu_87_m_axi_dma_AWQOS;
    end else begin
        dma0_AWQOS = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27))) begin
        dma0_AWREGION = grp_transfer_chunk_fu_95_m_axi_dma_AWREGION;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24))) begin
        dma0_AWREGION = grp_transfer_chunk_1_fu_87_m_axi_dma_AWREGION;
    end else begin
        dma0_AWREGION = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27))) begin
        dma0_AWSIZE = grp_transfer_chunk_fu_95_m_axi_dma_AWSIZE;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24))) begin
        dma0_AWSIZE = grp_transfer_chunk_1_fu_87_m_axi_dma_AWSIZE;
    end else begin
        dma0_AWSIZE = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27))) begin
        dma0_AWUSER = grp_transfer_chunk_fu_95_m_axi_dma_AWUSER;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24))) begin
        dma0_AWUSER = grp_transfer_chunk_1_fu_87_m_axi_dma_AWUSER;
    end else begin
        dma0_AWUSER = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27))) begin
        dma0_AWVALID = grp_transfer_chunk_fu_95_m_axi_dma_AWVALID;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24))) begin
        dma0_AWVALID = grp_transfer_chunk_1_fu_87_m_axi_dma_AWVALID;
    end else begin
        dma0_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27))) begin
        dma0_BREADY = grp_transfer_chunk_fu_95_m_axi_dma_BREADY;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24))) begin
        dma0_BREADY = grp_transfer_chunk_1_fu_87_m_axi_dma_BREADY;
    end else begin
        dma0_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27))) begin
        dma0_RREADY = grp_transfer_chunk_fu_95_m_axi_dma_RREADY;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24))) begin
        dma0_RREADY = grp_transfer_chunk_1_fu_87_m_axi_dma_RREADY;
    end else begin
        dma0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27))) begin
        dma0_WDATA = grp_transfer_chunk_fu_95_m_axi_dma_WDATA;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24))) begin
        dma0_WDATA = grp_transfer_chunk_1_fu_87_m_axi_dma_WDATA;
    end else begin
        dma0_WDATA = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27))) begin
        dma0_WID = grp_transfer_chunk_fu_95_m_axi_dma_WID;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24))) begin
        dma0_WID = grp_transfer_chunk_1_fu_87_m_axi_dma_WID;
    end else begin
        dma0_WID = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27))) begin
        dma0_WLAST = grp_transfer_chunk_fu_95_m_axi_dma_WLAST;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24))) begin
        dma0_WLAST = grp_transfer_chunk_1_fu_87_m_axi_dma_WLAST;
    end else begin
        dma0_WLAST = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27))) begin
        dma0_WSTRB = grp_transfer_chunk_fu_95_m_axi_dma_WSTRB;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24))) begin
        dma0_WSTRB = grp_transfer_chunk_1_fu_87_m_axi_dma_WSTRB;
    end else begin
        dma0_WSTRB = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27))) begin
        dma0_WUSER = grp_transfer_chunk_fu_95_m_axi_dma_WUSER;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24))) begin
        dma0_WUSER = grp_transfer_chunk_1_fu_87_m_axi_dma_WUSER;
    end else begin
        dma0_WUSER = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27))) begin
        dma0_WVALID = grp_transfer_chunk_fu_95_m_axi_dma_WVALID;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24))) begin
        dma0_WVALID = grp_transfer_chunk_1_fu_87_m_axi_dma_WVALID;
    end else begin
        dma0_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_108_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        grp_fu_141_ap_start = 1'b1;
    end else begin
        grp_fu_141_ap_start = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if ((~(frame_trigger_V_read_read_fu_70_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond_fu_108_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if (((grp_transfer_chunk_1_fu_87_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            if (((grp_transfer_chunk_fu_95_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign chunk_ctr_1_fu_114_p2 = (chunk_ctr_reg_76 + 10'd1);

assign exitcond_fu_108_p2 = ((chunk_ctr_reg_76 == 10'd900) ? 1'b1 : 1'b0);

assign frame_trigger_V_read_read_fu_70_p2 = frame_trigger_V;

assign grp_fu_141_p1 = 18'd1280;

assign grp_transfer_chunk_1_fu_87_ap_start = grp_transfer_chunk_1_fu_87_ap_start_reg;

assign grp_transfer_chunk_fu_95_ap_start = grp_transfer_chunk_fu_95_ap_start_reg;

assign input_row_fu_147_p3 = {{tmp_1_reg_185}, {2'd0}};

assign m_axi_dma1_ARADDR = 32'd0;

assign m_axi_dma1_ARBURST = 2'd0;

assign m_axi_dma1_ARCACHE = 4'd0;

assign m_axi_dma1_ARID = 1'd0;

assign m_axi_dma1_ARLEN = 8'd0;

assign m_axi_dma1_ARLOCK = 2'd0;

assign m_axi_dma1_ARPROT = 3'd0;

assign m_axi_dma1_ARQOS = 4'd0;

assign m_axi_dma1_ARREGION = 4'd0;

assign m_axi_dma1_ARSIZE = 3'd0;

assign m_axi_dma1_ARUSER = 1'd0;

assign m_axi_dma1_ARVALID = 1'b0;

assign m_axi_dma1_AWADDR = 32'd0;

assign m_axi_dma1_AWBURST = 2'd0;

assign m_axi_dma1_AWCACHE = 4'd0;

assign m_axi_dma1_AWID = 1'd0;

assign m_axi_dma1_AWLEN = 8'd0;

assign m_axi_dma1_AWLOCK = 2'd0;

assign m_axi_dma1_AWPROT = 3'd0;

assign m_axi_dma1_AWQOS = 4'd0;

assign m_axi_dma1_AWREGION = 4'd0;

assign m_axi_dma1_AWSIZE = 3'd0;

assign m_axi_dma1_AWUSER = 1'd0;

assign m_axi_dma1_AWVALID = 1'b0;

assign m_axi_dma1_BREADY = 1'b0;

assign m_axi_dma1_RREADY = 1'b0;

assign m_axi_dma1_WDATA = 32'd0;

assign m_axi_dma1_WID = 1'd0;

assign m_axi_dma1_WLAST = 1'b0;

assign m_axi_dma1_WSTRB = 4'd0;

assign m_axi_dma1_WUSER = 1'd0;

assign m_axi_dma1_WVALID = 1'b0;

assign mul_fu_160_p0 = 38'd419431;

assign mul_fu_160_p1 = mul_fu_160_p10;

assign mul_fu_160_p10 = tmp_fu_120_p3;

assign tmp_2_fu_155_p1 = grp_fu_141_p2[10:0];

assign tmp_fu_120_p3 = {{chunk_ctr_reg_76}, {8'd0}};

always @ (posedge ap_clk) begin
    input_row_reg_190[1:0] <= 2'b00;
end

endmodule //dma_master_driver
