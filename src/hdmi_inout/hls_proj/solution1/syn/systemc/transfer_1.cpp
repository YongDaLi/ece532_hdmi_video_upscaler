// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "transfer_1.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic transfer_1::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic transfer_1::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<17> transfer_1::ap_ST_fsm_state1 = "1";
const sc_lv<17> transfer_1::ap_ST_fsm_state2 = "10";
const sc_lv<17> transfer_1::ap_ST_fsm_state3 = "100";
const sc_lv<17> transfer_1::ap_ST_fsm_state4 = "1000";
const sc_lv<17> transfer_1::ap_ST_fsm_state5 = "10000";
const sc_lv<17> transfer_1::ap_ST_fsm_state6 = "100000";
const sc_lv<17> transfer_1::ap_ST_fsm_state7 = "1000000";
const sc_lv<17> transfer_1::ap_ST_fsm_state8 = "10000000";
const sc_lv<17> transfer_1::ap_ST_fsm_state9 = "100000000";
const sc_lv<17> transfer_1::ap_ST_fsm_state10 = "1000000000";
const sc_lv<17> transfer_1::ap_ST_fsm_state11 = "10000000000";
const sc_lv<17> transfer_1::ap_ST_fsm_state12 = "100000000000";
const sc_lv<17> transfer_1::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<17> transfer_1::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<17> transfer_1::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<17> transfer_1::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<17> transfer_1::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<32> transfer_1::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> transfer_1::ap_const_lv32_1 = "1";
const sc_lv<32> transfer_1::ap_const_lv32_6 = "110";
const sc_lv<32> transfer_1::ap_const_lv32_2 = "10";
const sc_lv<32> transfer_1::ap_const_lv32_7 = "111";
const sc_lv<32> transfer_1::ap_const_lv32_3 = "11";
const sc_lv<32> transfer_1::ap_const_lv32_8 = "1000";
const sc_lv<32> transfer_1::ap_const_lv32_9 = "1001";
const sc_lv<32> transfer_1::ap_const_lv32_10 = "10000";
const bool transfer_1::ap_const_boolean_0 = false;
const sc_lv<64> transfer_1::ap_const_lv64_10780006 = "10000011110000000000000000110";
const sc_lv<64> transfer_1::ap_const_lv64_10780000 = "10000011110000000000000000000";
const sc_lv<64> transfer_1::ap_const_lv64_1078000A = "10000011110000000000000001010";
const sc_lv<64> transfer_1::ap_const_lv64_10780001 = "10000011110000000000000000001";
const sc_lv<1> transfer_1::ap_const_lv1_0 = "0";
const sc_lv<3> transfer_1::ap_const_lv3_0 = "000";
const sc_lv<2> transfer_1::ap_const_lv2_0 = "00";
const sc_lv<4> transfer_1::ap_const_lv4_0 = "0000";
const sc_lv<4> transfer_1::ap_const_lv4_F = "1111";
const sc_lv<32> transfer_1::ap_const_lv32_300 = "1100000000";
const sc_lv<1> transfer_1::ap_const_lv1_1 = "1";
const bool transfer_1::ap_const_boolean_1 = true;

transfer_1::transfer_1(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state2_io);
    sensitive << ( ap_sig_ioackin_m_axi_dma_AWREADY );
    sensitive << ( ap_sig_ioackin_m_axi_dma_WREADY );

    SC_METHOD(thread_ap_block_state3_io);
    sensitive << ( ap_sig_ioackin_m_axi_dma_AWREADY );
    sensitive << ( ap_sig_ioackin_m_axi_dma_WREADY );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_dma_RVALID );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( tmp_fu_140_p3 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( m_axi_dma_RVALID );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( tmp_fu_140_p3 );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_dma_ARREADY);
    sensitive << ( m_axi_dma_ARREADY );
    sensitive << ( ap_reg_ioackin_m_axi_dma_ARREADY );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_dma_AWREADY);
    sensitive << ( m_axi_dma_AWREADY );
    sensitive << ( ap_reg_ioackin_m_axi_dma_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_dma_WREADY);
    sensitive << ( m_axi_dma_WREADY );
    sensitive << ( ap_reg_ioackin_m_axi_dma_WREADY );

    SC_METHOD(thread_dma_blk_n_AR);
    sensitive << ( m_axi_dma_ARREADY );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_dma_blk_n_AW);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_dma_AWREADY );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_dma_blk_n_B);
    sensitive << ( m_axi_dma_BVALID );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_dma_blk_n_R);
    sensitive << ( m_axi_dma_RVALID );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_dma_blk_n_W);
    sensitive << ( m_axi_dma_WREADY );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_m_axi_dma_ARADDR);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_reg_ioackin_m_axi_dma_ARREADY );

    SC_METHOD(thread_m_axi_dma_ARBURST);

    SC_METHOD(thread_m_axi_dma_ARCACHE);

    SC_METHOD(thread_m_axi_dma_ARID);

    SC_METHOD(thread_m_axi_dma_ARLEN);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_reg_ioackin_m_axi_dma_ARREADY );

    SC_METHOD(thread_m_axi_dma_ARLOCK);

    SC_METHOD(thread_m_axi_dma_ARPROT);

    SC_METHOD(thread_m_axi_dma_ARQOS);

    SC_METHOD(thread_m_axi_dma_ARREGION);

    SC_METHOD(thread_m_axi_dma_ARSIZE);

    SC_METHOD(thread_m_axi_dma_ARUSER);

    SC_METHOD(thread_m_axi_dma_ARVALID);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_reg_ioackin_m_axi_dma_ARREADY );

    SC_METHOD(thread_m_axi_dma_AWADDR);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_reg_ioackin_m_axi_dma_AWREADY );

    SC_METHOD(thread_m_axi_dma_AWBURST);

    SC_METHOD(thread_m_axi_dma_AWCACHE);

    SC_METHOD(thread_m_axi_dma_AWID);

    SC_METHOD(thread_m_axi_dma_AWLEN);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_reg_ioackin_m_axi_dma_AWREADY );

    SC_METHOD(thread_m_axi_dma_AWLOCK);

    SC_METHOD(thread_m_axi_dma_AWPROT);

    SC_METHOD(thread_m_axi_dma_AWQOS);

    SC_METHOD(thread_m_axi_dma_AWREGION);

    SC_METHOD(thread_m_axi_dma_AWSIZE);

    SC_METHOD(thread_m_axi_dma_AWUSER);

    SC_METHOD(thread_m_axi_dma_AWVALID);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_reg_ioackin_m_axi_dma_AWREADY );

    SC_METHOD(thread_m_axi_dma_BREADY);
    sensitive << ( m_axi_dma_BVALID );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_m_axi_dma_RREADY);
    sensitive << ( m_axi_dma_RVALID );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_m_axi_dma_WDATA);
    sensitive << ( addr );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_reg_ioackin_m_axi_dma_WREADY );

    SC_METHOD(thread_m_axi_dma_WID);

    SC_METHOD(thread_m_axi_dma_WLAST);

    SC_METHOD(thread_m_axi_dma_WSTRB);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_reg_ioackin_m_axi_dma_WREADY );

    SC_METHOD(thread_m_axi_dma_WUSER);

    SC_METHOD(thread_m_axi_dma_WVALID);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_reg_ioackin_m_axi_dma_WREADY );

    SC_METHOD(thread_tmp_fu_140_p3);
    sensitive << ( m_axi_dma_RDATA );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_dma_RVALID );
    sensitive << ( m_axi_dma_BVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_sig_ioackin_m_axi_dma_AWREADY );
    sensitive << ( ap_sig_ioackin_m_axi_dma_WREADY );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_sig_ioackin_m_axi_dma_ARREADY );
    sensitive << ( tmp_fu_140_p3 );

    ap_CS_fsm = "00000000000000001";
    ap_reg_ioackin_m_axi_dma_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_m_axi_dma_WREADY = SC_LOGIC_0;
    ap_reg_ioackin_m_axi_dma_ARREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "transfer_1_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, m_axi_dma_AWVALID, "(port)m_axi_dma_AWVALID");
    sc_trace(mVcdFile, m_axi_dma_AWREADY, "(port)m_axi_dma_AWREADY");
    sc_trace(mVcdFile, m_axi_dma_AWADDR, "(port)m_axi_dma_AWADDR");
    sc_trace(mVcdFile, m_axi_dma_AWID, "(port)m_axi_dma_AWID");
    sc_trace(mVcdFile, m_axi_dma_AWLEN, "(port)m_axi_dma_AWLEN");
    sc_trace(mVcdFile, m_axi_dma_AWSIZE, "(port)m_axi_dma_AWSIZE");
    sc_trace(mVcdFile, m_axi_dma_AWBURST, "(port)m_axi_dma_AWBURST");
    sc_trace(mVcdFile, m_axi_dma_AWLOCK, "(port)m_axi_dma_AWLOCK");
    sc_trace(mVcdFile, m_axi_dma_AWCACHE, "(port)m_axi_dma_AWCACHE");
    sc_trace(mVcdFile, m_axi_dma_AWPROT, "(port)m_axi_dma_AWPROT");
    sc_trace(mVcdFile, m_axi_dma_AWQOS, "(port)m_axi_dma_AWQOS");
    sc_trace(mVcdFile, m_axi_dma_AWREGION, "(port)m_axi_dma_AWREGION");
    sc_trace(mVcdFile, m_axi_dma_AWUSER, "(port)m_axi_dma_AWUSER");
    sc_trace(mVcdFile, m_axi_dma_WVALID, "(port)m_axi_dma_WVALID");
    sc_trace(mVcdFile, m_axi_dma_WREADY, "(port)m_axi_dma_WREADY");
    sc_trace(mVcdFile, m_axi_dma_WDATA, "(port)m_axi_dma_WDATA");
    sc_trace(mVcdFile, m_axi_dma_WSTRB, "(port)m_axi_dma_WSTRB");
    sc_trace(mVcdFile, m_axi_dma_WLAST, "(port)m_axi_dma_WLAST");
    sc_trace(mVcdFile, m_axi_dma_WID, "(port)m_axi_dma_WID");
    sc_trace(mVcdFile, m_axi_dma_WUSER, "(port)m_axi_dma_WUSER");
    sc_trace(mVcdFile, m_axi_dma_ARVALID, "(port)m_axi_dma_ARVALID");
    sc_trace(mVcdFile, m_axi_dma_ARREADY, "(port)m_axi_dma_ARREADY");
    sc_trace(mVcdFile, m_axi_dma_ARADDR, "(port)m_axi_dma_ARADDR");
    sc_trace(mVcdFile, m_axi_dma_ARID, "(port)m_axi_dma_ARID");
    sc_trace(mVcdFile, m_axi_dma_ARLEN, "(port)m_axi_dma_ARLEN");
    sc_trace(mVcdFile, m_axi_dma_ARSIZE, "(port)m_axi_dma_ARSIZE");
    sc_trace(mVcdFile, m_axi_dma_ARBURST, "(port)m_axi_dma_ARBURST");
    sc_trace(mVcdFile, m_axi_dma_ARLOCK, "(port)m_axi_dma_ARLOCK");
    sc_trace(mVcdFile, m_axi_dma_ARCACHE, "(port)m_axi_dma_ARCACHE");
    sc_trace(mVcdFile, m_axi_dma_ARPROT, "(port)m_axi_dma_ARPROT");
    sc_trace(mVcdFile, m_axi_dma_ARQOS, "(port)m_axi_dma_ARQOS");
    sc_trace(mVcdFile, m_axi_dma_ARREGION, "(port)m_axi_dma_ARREGION");
    sc_trace(mVcdFile, m_axi_dma_ARUSER, "(port)m_axi_dma_ARUSER");
    sc_trace(mVcdFile, m_axi_dma_RVALID, "(port)m_axi_dma_RVALID");
    sc_trace(mVcdFile, m_axi_dma_RREADY, "(port)m_axi_dma_RREADY");
    sc_trace(mVcdFile, m_axi_dma_RDATA, "(port)m_axi_dma_RDATA");
    sc_trace(mVcdFile, m_axi_dma_RLAST, "(port)m_axi_dma_RLAST");
    sc_trace(mVcdFile, m_axi_dma_RID, "(port)m_axi_dma_RID");
    sc_trace(mVcdFile, m_axi_dma_RUSER, "(port)m_axi_dma_RUSER");
    sc_trace(mVcdFile, m_axi_dma_RRESP, "(port)m_axi_dma_RRESP");
    sc_trace(mVcdFile, m_axi_dma_BVALID, "(port)m_axi_dma_BVALID");
    sc_trace(mVcdFile, m_axi_dma_BREADY, "(port)m_axi_dma_BREADY");
    sc_trace(mVcdFile, m_axi_dma_BRESP, "(port)m_axi_dma_BRESP");
    sc_trace(mVcdFile, m_axi_dma_BID, "(port)m_axi_dma_BID");
    sc_trace(mVcdFile, m_axi_dma_BUSER, "(port)m_axi_dma_BUSER");
    sc_trace(mVcdFile, addr, "(port)addr");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, dma_blk_n_AW, "dma_blk_n_AW");
    sc_trace(mVcdFile, dma_blk_n_W, "dma_blk_n_W");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, dma_blk_n_B, "dma_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, dma_blk_n_AR, "dma_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, dma_blk_n_R, "dma_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_dma_AWREADY, "ap_sig_ioackin_m_axi_dma_AWREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_dma_WREADY, "ap_sig_ioackin_m_axi_dma_WREADY");
    sc_trace(mVcdFile, ap_block_state2_io, "ap_block_state2_io");
    sc_trace(mVcdFile, ap_block_state3_io, "ap_block_state3_io");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_dma_AWREADY, "ap_reg_ioackin_m_axi_dma_AWREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_dma_WREADY, "ap_reg_ioackin_m_axi_dma_WREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_dma_ARREADY, "ap_reg_ioackin_m_axi_dma_ARREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_dma_ARREADY, "ap_sig_ioackin_m_axi_dma_ARREADY");
    sc_trace(mVcdFile, tmp_fu_140_p3, "tmp_fu_140_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

transfer_1::~transfer_1() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void transfer_1::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_dma_ARREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_dma_ARREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_m_axi_dma_ARREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, m_axi_dma_ARREADY.read())) {
                ap_reg_ioackin_m_axi_dma_ARREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_dma_AWREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
              !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_dma_AWREADY.read()))) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
              esl_seteq<1,1,1>(ap_block_state2_io.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
              esl_seteq<1,1,1>(ap_block_state3_io.read(), ap_const_boolean_0)))) {
            ap_reg_ioackin_m_axi_dma_AWREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                     esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_dma_AWREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_dma_AWREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_dma_AWREADY.read())))) {
            ap_reg_ioackin_m_axi_dma_AWREADY = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_dma_WREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
              esl_seteq<1,1,1>(ap_block_state2_io.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
              esl_seteq<1,1,1>(ap_block_state3_io.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_dma_WREADY.read(), ap_const_logic_1)))) {
            ap_reg_ioackin_m_axi_dma_WREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_dma_WREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_dma_WREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_dma_WREADY.read())))) {
            ap_reg_ioackin_m_axi_dma_WREADY = ap_const_logic_1;
        }
    }
}

void transfer_1::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void transfer_1::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void transfer_1::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void transfer_1::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void transfer_1::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void transfer_1::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void transfer_1::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void transfer_1::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void transfer_1::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void transfer_1::thread_ap_block_state2_io() {
    ap_block_state2_io = (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_dma_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_dma_WREADY.read()));
}

void transfer_1::thread_ap_block_state3_io() {
    ap_block_state3_io = (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_dma_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_dma_WREADY.read()));
}

void transfer_1::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && 
          esl_seteq<1,1,1>(m_axi_dma_RVALID.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(tmp_fu_140_p3.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void transfer_1::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void transfer_1::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && 
         esl_seteq<1,1,1>(m_axi_dma_RVALID.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(tmp_fu_140_p3.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void transfer_1::thread_ap_sig_ioackin_m_axi_dma_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_dma_ARREADY.read())) {
        ap_sig_ioackin_m_axi_dma_ARREADY = m_axi_dma_ARREADY.read();
    } else {
        ap_sig_ioackin_m_axi_dma_ARREADY = ap_const_logic_1;
    }
}

void transfer_1::thread_ap_sig_ioackin_m_axi_dma_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_dma_AWREADY.read())) {
        ap_sig_ioackin_m_axi_dma_AWREADY = m_axi_dma_AWREADY.read();
    } else {
        ap_sig_ioackin_m_axi_dma_AWREADY = ap_const_logic_1;
    }
}

void transfer_1::thread_ap_sig_ioackin_m_axi_dma_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_dma_WREADY.read())) {
        ap_sig_ioackin_m_axi_dma_WREADY = m_axi_dma_WREADY.read();
    } else {
        ap_sig_ioackin_m_axi_dma_WREADY = ap_const_logic_1;
    }
}

void transfer_1::thread_dma_blk_n_AR() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        dma_blk_n_AR = m_axi_dma_ARREADY.read();
    } else {
        dma_blk_n_AR = ap_const_logic_1;
    }
}

void transfer_1::thread_dma_blk_n_AW() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        dma_blk_n_AW = m_axi_dma_AWREADY.read();
    } else {
        dma_blk_n_AW = ap_const_logic_1;
    }
}

void transfer_1::thread_dma_blk_n_B() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        dma_blk_n_B = m_axi_dma_BVALID.read();
    } else {
        dma_blk_n_B = ap_const_logic_1;
    }
}

void transfer_1::thread_dma_blk_n_R() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        dma_blk_n_R = m_axi_dma_RVALID.read();
    } else {
        dma_blk_n_R = ap_const_logic_1;
    }
}

void transfer_1::thread_dma_blk_n_W() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        dma_blk_n_W = m_axi_dma_WREADY.read();
    } else {
        dma_blk_n_W = ap_const_logic_1;
    }
}

void transfer_1::thread_m_axi_dma_ARADDR() {
    m_axi_dma_ARADDR =  (sc_lv<32>) (ap_const_lv64_10780001);
}

void transfer_1::thread_m_axi_dma_ARBURST() {
    m_axi_dma_ARBURST = ap_const_lv2_0;
}

void transfer_1::thread_m_axi_dma_ARCACHE() {
    m_axi_dma_ARCACHE = ap_const_lv4_0;
}

void transfer_1::thread_m_axi_dma_ARID() {
    m_axi_dma_ARID = ap_const_lv1_0;
}

void transfer_1::thread_m_axi_dma_ARLEN() {
    m_axi_dma_ARLEN = ap_const_lv32_1;
}

void transfer_1::thread_m_axi_dma_ARLOCK() {
    m_axi_dma_ARLOCK = ap_const_lv2_0;
}

void transfer_1::thread_m_axi_dma_ARPROT() {
    m_axi_dma_ARPROT = ap_const_lv3_0;
}

void transfer_1::thread_m_axi_dma_ARQOS() {
    m_axi_dma_ARQOS = ap_const_lv4_0;
}

void transfer_1::thread_m_axi_dma_ARREGION() {
    m_axi_dma_ARREGION = ap_const_lv4_0;
}

void transfer_1::thread_m_axi_dma_ARSIZE() {
    m_axi_dma_ARSIZE = ap_const_lv3_0;
}

void transfer_1::thread_m_axi_dma_ARUSER() {
    m_axi_dma_ARUSER = ap_const_lv1_0;
}

void transfer_1::thread_m_axi_dma_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_dma_ARREADY.read()))) {
        m_axi_dma_ARVALID = ap_const_logic_1;
    } else {
        m_axi_dma_ARVALID = ap_const_logic_0;
    }
}

void transfer_1::thread_m_axi_dma_AWADDR() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_dma_AWREADY.read())) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            m_axi_dma_AWADDR =  (sc_lv<32>) (ap_const_lv64_1078000A);
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            m_axi_dma_AWADDR =  (sc_lv<32>) (ap_const_lv64_10780000);
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            m_axi_dma_AWADDR =  (sc_lv<32>) (ap_const_lv64_10780006);
        } else {
            m_axi_dma_AWADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        m_axi_dma_AWADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void transfer_1::thread_m_axi_dma_AWBURST() {
    m_axi_dma_AWBURST = ap_const_lv2_0;
}

void transfer_1::thread_m_axi_dma_AWCACHE() {
    m_axi_dma_AWCACHE = ap_const_lv4_0;
}

void transfer_1::thread_m_axi_dma_AWID() {
    m_axi_dma_AWID = ap_const_lv1_0;
}

void transfer_1::thread_m_axi_dma_AWLEN() {
    m_axi_dma_AWLEN = ap_const_lv32_1;
}

void transfer_1::thread_m_axi_dma_AWLOCK() {
    m_axi_dma_AWLOCK = ap_const_lv2_0;
}

void transfer_1::thread_m_axi_dma_AWPROT() {
    m_axi_dma_AWPROT = ap_const_lv3_0;
}

void transfer_1::thread_m_axi_dma_AWQOS() {
    m_axi_dma_AWQOS = ap_const_lv4_0;
}

void transfer_1::thread_m_axi_dma_AWREGION() {
    m_axi_dma_AWREGION = ap_const_lv4_0;
}

void transfer_1::thread_m_axi_dma_AWSIZE() {
    m_axi_dma_AWSIZE = ap_const_lv3_0;
}

void transfer_1::thread_m_axi_dma_AWUSER() {
    m_axi_dma_AWUSER = ap_const_lv1_0;
}

void transfer_1::thread_m_axi_dma_AWVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_dma_AWREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_dma_AWREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_dma_AWREADY.read())))) {
        m_axi_dma_AWVALID = ap_const_logic_1;
    } else {
        m_axi_dma_AWVALID = ap_const_logic_0;
    }
}

void transfer_1::thread_m_axi_dma_BREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
          esl_seteq<1,1,1>(m_axi_dma_BVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
          esl_seteq<1,1,1>(m_axi_dma_BVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          esl_seteq<1,1,1>(m_axi_dma_BVALID.read(), ap_const_logic_1)))) {
        m_axi_dma_BREADY = ap_const_logic_1;
    } else {
        m_axi_dma_BREADY = ap_const_logic_0;
    }
}

void transfer_1::thread_m_axi_dma_RREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && 
         esl_seteq<1,1,1>(m_axi_dma_RVALID.read(), ap_const_logic_1))) {
        m_axi_dma_RREADY = ap_const_logic_1;
    } else {
        m_axi_dma_RREADY = ap_const_logic_0;
    }
}

void transfer_1::thread_m_axi_dma_WDATA() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_dma_WREADY.read())) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
            m_axi_dma_WDATA = ap_const_lv32_300;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            m_axi_dma_WDATA = ap_const_lv32_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            m_axi_dma_WDATA = addr.read();
        } else {
            m_axi_dma_WDATA = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        m_axi_dma_WDATA = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void transfer_1::thread_m_axi_dma_WID() {
    m_axi_dma_WID = ap_const_lv1_0;
}

void transfer_1::thread_m_axi_dma_WLAST() {
    m_axi_dma_WLAST = ap_const_logic_0;
}

void transfer_1::thread_m_axi_dma_WSTRB() {
    m_axi_dma_WSTRB = ap_const_lv4_F;
}

void transfer_1::thread_m_axi_dma_WUSER() {
    m_axi_dma_WUSER = ap_const_lv1_0;
}

void transfer_1::thread_m_axi_dma_WVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_dma_WREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_dma_WREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_dma_WREADY.read())))) {
        m_axi_dma_WVALID = ap_const_logic_1;
    } else {
        m_axi_dma_WVALID = ap_const_logic_0;
    }
}

void transfer_1::thread_tmp_fu_140_p3() {
    tmp_fu_140_p3 = m_axi_dma_RDATA.read().range(1, 1);
}

void transfer_1::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_dma_AWREADY.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_block_state2_io.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_block_state3_io.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_dma_WREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(m_axi_dma_BVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(m_axi_dma_BVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(m_axi_dma_BVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_dma_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && esl_seteq<1,1,1>(m_axi_dma_RVALID.read(), ap_const_logic_1) && esl_seteq<1,1,1>(tmp_fu_140_p3.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && esl_seteq<1,1,1>(m_axi_dma_RVALID.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_140_p3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state17;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<17>) ("XXXXXXXXXXXXXXXXX");
            break;
    }
}

}

