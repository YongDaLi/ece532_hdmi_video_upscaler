// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module transfer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_dma_AWVALID,
        m_axi_dma_AWREADY,
        m_axi_dma_AWADDR,
        m_axi_dma_AWID,
        m_axi_dma_AWLEN,
        m_axi_dma_AWSIZE,
        m_axi_dma_AWBURST,
        m_axi_dma_AWLOCK,
        m_axi_dma_AWCACHE,
        m_axi_dma_AWPROT,
        m_axi_dma_AWQOS,
        m_axi_dma_AWREGION,
        m_axi_dma_AWUSER,
        m_axi_dma_WVALID,
        m_axi_dma_WREADY,
        m_axi_dma_WDATA,
        m_axi_dma_WSTRB,
        m_axi_dma_WLAST,
        m_axi_dma_WID,
        m_axi_dma_WUSER,
        m_axi_dma_ARVALID,
        m_axi_dma_ARREADY,
        m_axi_dma_ARADDR,
        m_axi_dma_ARID,
        m_axi_dma_ARLEN,
        m_axi_dma_ARSIZE,
        m_axi_dma_ARBURST,
        m_axi_dma_ARLOCK,
        m_axi_dma_ARCACHE,
        m_axi_dma_ARPROT,
        m_axi_dma_ARQOS,
        m_axi_dma_ARREGION,
        m_axi_dma_ARUSER,
        m_axi_dma_RVALID,
        m_axi_dma_RREADY,
        m_axi_dma_RDATA,
        m_axi_dma_RLAST,
        m_axi_dma_RID,
        m_axi_dma_RUSER,
        m_axi_dma_RRESP,
        m_axi_dma_BVALID,
        m_axi_dma_BREADY,
        m_axi_dma_BRESP,
        m_axi_dma_BID,
        m_axi_dma_BUSER,
        addr
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_state8 = 17'd128;
parameter    ap_ST_fsm_state9 = 17'd256;
parameter    ap_ST_fsm_state10 = 17'd512;
parameter    ap_ST_fsm_state11 = 17'd1024;
parameter    ap_ST_fsm_state12 = 17'd2048;
parameter    ap_ST_fsm_state13 = 17'd4096;
parameter    ap_ST_fsm_state14 = 17'd8192;
parameter    ap_ST_fsm_state15 = 17'd16384;
parameter    ap_ST_fsm_state16 = 17'd32768;
parameter    ap_ST_fsm_state17 = 17'd65536;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_dma_AWVALID;
input   m_axi_dma_AWREADY;
output  [31:0] m_axi_dma_AWADDR;
output  [0:0] m_axi_dma_AWID;
output  [31:0] m_axi_dma_AWLEN;
output  [2:0] m_axi_dma_AWSIZE;
output  [1:0] m_axi_dma_AWBURST;
output  [1:0] m_axi_dma_AWLOCK;
output  [3:0] m_axi_dma_AWCACHE;
output  [2:0] m_axi_dma_AWPROT;
output  [3:0] m_axi_dma_AWQOS;
output  [3:0] m_axi_dma_AWREGION;
output  [0:0] m_axi_dma_AWUSER;
output   m_axi_dma_WVALID;
input   m_axi_dma_WREADY;
output  [31:0] m_axi_dma_WDATA;
output  [3:0] m_axi_dma_WSTRB;
output   m_axi_dma_WLAST;
output  [0:0] m_axi_dma_WID;
output  [0:0] m_axi_dma_WUSER;
output   m_axi_dma_ARVALID;
input   m_axi_dma_ARREADY;
output  [31:0] m_axi_dma_ARADDR;
output  [0:0] m_axi_dma_ARID;
output  [31:0] m_axi_dma_ARLEN;
output  [2:0] m_axi_dma_ARSIZE;
output  [1:0] m_axi_dma_ARBURST;
output  [1:0] m_axi_dma_ARLOCK;
output  [3:0] m_axi_dma_ARCACHE;
output  [2:0] m_axi_dma_ARPROT;
output  [3:0] m_axi_dma_ARQOS;
output  [3:0] m_axi_dma_ARREGION;
output  [0:0] m_axi_dma_ARUSER;
input   m_axi_dma_RVALID;
output   m_axi_dma_RREADY;
input  [31:0] m_axi_dma_RDATA;
input   m_axi_dma_RLAST;
input  [0:0] m_axi_dma_RID;
input  [0:0] m_axi_dma_RUSER;
input  [1:0] m_axi_dma_RRESP;
input   m_axi_dma_BVALID;
output   m_axi_dma_BREADY;
input  [1:0] m_axi_dma_BRESP;
input  [0:0] m_axi_dma_BID;
input  [0:0] m_axi_dma_BUSER;
input  [31:0] addr;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_dma_AWVALID;
reg[31:0] m_axi_dma_AWADDR;
reg m_axi_dma_WVALID;
reg[31:0] m_axi_dma_WDATA;
reg m_axi_dma_ARVALID;
reg m_axi_dma_RREADY;
reg m_axi_dma_BREADY;

(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    dma_blk_n_AW;
reg    dma_blk_n_W;
wire    ap_CS_fsm_state2;
reg    dma_blk_n_B;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state9;
reg    dma_blk_n_AR;
wire    ap_CS_fsm_state10;
reg    dma_blk_n_R;
wire    ap_CS_fsm_state17;
reg    ap_sig_ioackin_m_axi_dma_AWREADY;
reg    ap_sig_ioackin_m_axi_dma_WREADY;
reg    ap_block_state2_io;
reg    ap_block_state3_io;
reg    ap_reg_ioackin_m_axi_dma_AWREADY;
reg    ap_reg_ioackin_m_axi_dma_WREADY;
reg    ap_reg_ioackin_m_axi_dma_ARREADY;
reg    ap_sig_ioackin_m_axi_dma_ARREADY;
wire   [0:0] tmp_fu_140_p3;
reg   [16:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
#0 ap_reg_ioackin_m_axi_dma_AWREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_dma_WREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_dma_ARREADY = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_dma_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            if ((ap_sig_ioackin_m_axi_dma_ARREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_dma_ARREADY <= 1'b0;
            end else if ((m_axi_dma_ARREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_dma_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_dma_AWREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io)) | (~((ap_start == 1'b0) | (ap_sig_ioackin_m_axi_dma_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_block_state3_io)))) begin
            ap_reg_ioackin_m_axi_dma_AWREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state2) & (m_axi_dma_AWREADY == 1'b1)) | ((ap_start == 1'b1) & (m_axi_dma_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((m_axi_dma_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
            ap_reg_ioackin_m_axi_dma_AWREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_dma_WREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io)) | ((1'b1 == ap_CS_fsm_state4) & (ap_sig_ioackin_m_axi_dma_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_block_state3_io)))) begin
            ap_reg_ioackin_m_axi_dma_WREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state2) & (m_axi_dma_WREADY == 1'b1)) | ((m_axi_dma_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((m_axi_dma_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
            ap_reg_ioackin_m_axi_dma_WREADY <= 1'b1;
        end
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((m_axi_dma_RVALID == 1'b1) & (tmp_fu_140_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state17)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_dma_RVALID == 1'b1) & (tmp_fu_140_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_dma_ARREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_dma_ARREADY = m_axi_dma_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_dma_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_dma_AWREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_dma_AWREADY = m_axi_dma_AWREADY;
    end else begin
        ap_sig_ioackin_m_axi_dma_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_dma_WREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_dma_WREADY = m_axi_dma_WREADY;
    end else begin
        ap_sig_ioackin_m_axi_dma_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        dma_blk_n_AR = m_axi_dma_ARREADY;
    end else begin
        dma_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        dma_blk_n_AW = m_axi_dma_AWREADY;
    end else begin
        dma_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        dma_blk_n_B = m_axi_dma_BVALID;
    end else begin
        dma_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        dma_blk_n_R = m_axi_dma_RVALID;
    end else begin
        dma_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        dma_blk_n_W = m_axi_dma_WREADY;
    end else begin
        dma_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_dma_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state10))) begin
        m_axi_dma_ARVALID = 1'b1;
    end else begin
        m_axi_dma_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_dma_AWREADY == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            m_axi_dma_AWADDR = 64'd276299798;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            m_axi_dma_AWADDR = 64'd276299788;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            m_axi_dma_AWADDR = 64'd276299794;
        end else begin
            m_axi_dma_AWADDR = 'bx;
        end
    end else begin
        m_axi_dma_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_m_axi_dma_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state2)) | ((ap_reg_ioackin_m_axi_dma_AWREADY == 1'b0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((ap_reg_ioackin_m_axi_dma_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state3)))) begin
        m_axi_dma_AWVALID = 1'b1;
    end else begin
        m_axi_dma_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((m_axi_dma_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((m_axi_dma_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((m_axi_dma_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state7)))) begin
        m_axi_dma_BREADY = 1'b1;
    end else begin
        m_axi_dma_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_dma_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        m_axi_dma_RREADY = 1'b1;
    end else begin
        m_axi_dma_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_dma_WREADY == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            m_axi_dma_WDATA = 32'd768;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            m_axi_dma_WDATA = 32'd1;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            m_axi_dma_WDATA = addr;
        end else begin
            m_axi_dma_WDATA = 'bx;
        end
    end else begin
        m_axi_dma_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_m_axi_dma_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state2)) | ((ap_reg_ioackin_m_axi_dma_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state4)) | ((ap_reg_ioackin_m_axi_dma_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state3)))) begin
        m_axi_dma_WVALID = 1'b1;
    end else begin
        m_axi_dma_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_sig_ioackin_m_axi_dma_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_block_state3_io))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (ap_sig_ioackin_m_axi_dma_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((m_axi_dma_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((m_axi_dma_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((m_axi_dma_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((ap_sig_ioackin_m_axi_dma_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((m_axi_dma_RVALID == 1'b1) & (tmp_fu_140_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((m_axi_dma_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17) & (tmp_fu_140_p3 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state2_io = ((ap_sig_ioackin_m_axi_dma_WREADY == 1'b0) | (ap_sig_ioackin_m_axi_dma_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state3_io = ((ap_sig_ioackin_m_axi_dma_WREADY == 1'b0) | (ap_sig_ioackin_m_axi_dma_AWREADY == 1'b0));
end

assign m_axi_dma_ARADDR = 64'd276299789;

assign m_axi_dma_ARBURST = 2'd0;

assign m_axi_dma_ARCACHE = 4'd0;

assign m_axi_dma_ARID = 1'd0;

assign m_axi_dma_ARLEN = 32'd1;

assign m_axi_dma_ARLOCK = 2'd0;

assign m_axi_dma_ARPROT = 3'd0;

assign m_axi_dma_ARQOS = 4'd0;

assign m_axi_dma_ARREGION = 4'd0;

assign m_axi_dma_ARSIZE = 3'd0;

assign m_axi_dma_ARUSER = 1'd0;

assign m_axi_dma_AWBURST = 2'd0;

assign m_axi_dma_AWCACHE = 4'd0;

assign m_axi_dma_AWID = 1'd0;

assign m_axi_dma_AWLEN = 32'd1;

assign m_axi_dma_AWLOCK = 2'd0;

assign m_axi_dma_AWPROT = 3'd0;

assign m_axi_dma_AWQOS = 4'd0;

assign m_axi_dma_AWREGION = 4'd0;

assign m_axi_dma_AWSIZE = 3'd0;

assign m_axi_dma_AWUSER = 1'd0;

assign m_axi_dma_WID = 1'd0;

assign m_axi_dma_WLAST = 1'b0;

assign m_axi_dma_WSTRB = 4'd15;

assign m_axi_dma_WUSER = 1'd0;

assign tmp_fu_140_p3 = m_axi_dma_RDATA[32'd1];

endmodule //transfer
