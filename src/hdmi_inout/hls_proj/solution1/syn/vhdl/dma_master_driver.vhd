-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dma_master_driver is
generic (
    C_M_AXI_DMA0_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DMA0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DMA0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DMA0_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DMA0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DMA0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DMA0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DMA0_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DMA1_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DMA1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DMA1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DMA1_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DMA1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DMA1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DMA1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DMA1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DMA0_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_DMA0_USER_VALUE : INTEGER := 0;
    C_M_AXI_DMA0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DMA0_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_dma0_AWVALID : OUT STD_LOGIC;
    m_axi_dma0_AWREADY : IN STD_LOGIC;
    m_axi_dma0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DMA0_ADDR_WIDTH-1 downto 0);
    m_axi_dma0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DMA0_ID_WIDTH-1 downto 0);
    m_axi_dma0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_dma0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dma0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dma0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dma0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dma0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dma0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dma0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dma0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DMA0_AWUSER_WIDTH-1 downto 0);
    m_axi_dma0_WVALID : OUT STD_LOGIC;
    m_axi_dma0_WREADY : IN STD_LOGIC;
    m_axi_dma0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DMA0_DATA_WIDTH-1 downto 0);
    m_axi_dma0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DMA0_DATA_WIDTH/8-1 downto 0);
    m_axi_dma0_WLAST : OUT STD_LOGIC;
    m_axi_dma0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DMA0_ID_WIDTH-1 downto 0);
    m_axi_dma0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DMA0_WUSER_WIDTH-1 downto 0);
    m_axi_dma0_ARVALID : OUT STD_LOGIC;
    m_axi_dma0_ARREADY : IN STD_LOGIC;
    m_axi_dma0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DMA0_ADDR_WIDTH-1 downto 0);
    m_axi_dma0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DMA0_ID_WIDTH-1 downto 0);
    m_axi_dma0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_dma0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dma0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dma0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dma0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dma0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dma0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dma0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dma0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DMA0_ARUSER_WIDTH-1 downto 0);
    m_axi_dma0_RVALID : IN STD_LOGIC;
    m_axi_dma0_RREADY : OUT STD_LOGIC;
    m_axi_dma0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DMA0_DATA_WIDTH-1 downto 0);
    m_axi_dma0_RLAST : IN STD_LOGIC;
    m_axi_dma0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DMA0_ID_WIDTH-1 downto 0);
    m_axi_dma0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DMA0_RUSER_WIDTH-1 downto 0);
    m_axi_dma0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dma0_BVALID : IN STD_LOGIC;
    m_axi_dma0_BREADY : OUT STD_LOGIC;
    m_axi_dma0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dma0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DMA0_ID_WIDTH-1 downto 0);
    m_axi_dma0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DMA0_BUSER_WIDTH-1 downto 0);
    m_axi_dma1_AWVALID : OUT STD_LOGIC;
    m_axi_dma1_AWREADY : IN STD_LOGIC;
    m_axi_dma1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DMA1_ADDR_WIDTH-1 downto 0);
    m_axi_dma1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DMA1_ID_WIDTH-1 downto 0);
    m_axi_dma1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_dma1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dma1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dma1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dma1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dma1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dma1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dma1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dma1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DMA1_AWUSER_WIDTH-1 downto 0);
    m_axi_dma1_WVALID : OUT STD_LOGIC;
    m_axi_dma1_WREADY : IN STD_LOGIC;
    m_axi_dma1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DMA1_DATA_WIDTH-1 downto 0);
    m_axi_dma1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DMA1_DATA_WIDTH/8-1 downto 0);
    m_axi_dma1_WLAST : OUT STD_LOGIC;
    m_axi_dma1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DMA1_ID_WIDTH-1 downto 0);
    m_axi_dma1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DMA1_WUSER_WIDTH-1 downto 0);
    m_axi_dma1_ARVALID : OUT STD_LOGIC;
    m_axi_dma1_ARREADY : IN STD_LOGIC;
    m_axi_dma1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DMA1_ADDR_WIDTH-1 downto 0);
    m_axi_dma1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DMA1_ID_WIDTH-1 downto 0);
    m_axi_dma1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_dma1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dma1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dma1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dma1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dma1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dma1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dma1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dma1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DMA1_ARUSER_WIDTH-1 downto 0);
    m_axi_dma1_RVALID : IN STD_LOGIC;
    m_axi_dma1_RREADY : OUT STD_LOGIC;
    m_axi_dma1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DMA1_DATA_WIDTH-1 downto 0);
    m_axi_dma1_RLAST : IN STD_LOGIC;
    m_axi_dma1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DMA1_ID_WIDTH-1 downto 0);
    m_axi_dma1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DMA1_RUSER_WIDTH-1 downto 0);
    m_axi_dma1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dma1_BVALID : IN STD_LOGIC;
    m_axi_dma1_BREADY : OUT STD_LOGIC;
    m_axi_dma1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dma1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DMA1_ID_WIDTH-1 downto 0);
    m_axi_dma1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DMA1_BUSER_WIDTH-1 downto 0);
    frame_trigger_V : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of dma_master_driver is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dma_master_driver,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a200tsbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=1,HLS_SYN_FF=2018,HLS_SYN_LUT=6498,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (26 downto 0) := "000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (26 downto 0) := "000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (26 downto 0) := "000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (26 downto 0) := "000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (26 downto 0) := "000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (26 downto 0) := "000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (26 downto 0) := "000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (26 downto 0) := "000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (26 downto 0) := "000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (26 downto 0) := "001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (26 downto 0) := "010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (26 downto 0) := "100000000000000000000000000";
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DMA1_TARGET_ADDR : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_DMA1_USER_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_DMA1_PROT_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_DMA1_CACHE_VALUE : INTEGER range 63 downto 0 := 3;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv10_384 : STD_LOGIC_VECTOR (9 downto 0) := "1110000100";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv18_500 : STD_LOGIC_VECTOR (17 downto 0) := "000000010100000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv38_66667 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000001100110011001100111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal dma0_AWVALID : STD_LOGIC;
    signal dma0_AWREADY : STD_LOGIC;
    signal dma0_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal dma0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal dma0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal dma0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal dma0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal dma0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal dma0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal dma0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal dma0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal dma0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal dma0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dma0_WVALID : STD_LOGIC;
    signal dma0_WREADY : STD_LOGIC;
    signal dma0_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal dma0_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal dma0_WLAST : STD_LOGIC;
    signal dma0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal dma0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dma0_ARVALID : STD_LOGIC;
    signal dma0_ARREADY : STD_LOGIC;
    signal dma0_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal dma0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal dma0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal dma0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal dma0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal dma0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal dma0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal dma0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal dma0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal dma0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal dma0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dma0_RVALID : STD_LOGIC;
    signal dma0_RREADY : STD_LOGIC;
    signal dma0_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal dma0_RLAST : STD_LOGIC;
    signal dma0_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal dma0_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dma0_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal dma0_BVALID : STD_LOGIC;
    signal dma0_BREADY : STD_LOGIC;
    signal dma0_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal dma0_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal dma0_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal frame_trigger_V_read_read_fu_70_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal chunk_ctr_1_fu_114_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal chunk_ctr_1_reg_175 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_fu_120_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal exitcond_fu_108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_185 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_row_fu_147_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal input_row_reg_190 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal tmp_2_fu_155_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2_reg_196 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_transfer_chunk_1_fu_87_ap_start : STD_LOGIC;
    signal grp_transfer_chunk_1_fu_87_ap_done : STD_LOGIC;
    signal grp_transfer_chunk_1_fu_87_ap_idle : STD_LOGIC;
    signal grp_transfer_chunk_1_fu_87_ap_ready : STD_LOGIC;
    signal grp_transfer_chunk_1_fu_87_m_axi_dma_AWVALID : STD_LOGIC;
    signal grp_transfer_chunk_1_fu_87_m_axi_dma_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_transfer_chunk_1_fu_87_m_axi_dma_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_transfer_chunk_1_fu_87_m_axi_dma_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_transfer_chunk_1_fu_87_m_axi_dma_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_transfer_chunk_1_fu_87_m_axi_dma_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_transfer_chunk_1_fu_87_m_axi_dma_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_transfer_chunk_1_fu_87_m_axi_dma_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_transfer_chunk_1_fu_87_m_axi_dma_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_transfer_chunk_1_fu_87_m_axi_dma_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_transfer_chunk_1_fu_87_m_axi_dma_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_transfer_chunk_1_fu_87_m_axi_dma_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_transfer_chunk_1_fu_87_m_axi_dma_WVALID : STD_LOGIC;
    signal grp_transfer_chunk_1_fu_87_m_axi_dma_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_transfer_chunk_1_fu_87_m_axi_dma_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_transfer_chunk_1_fu_87_m_axi_dma_WLAST : STD_LOGIC;
    signal grp_transfer_chunk_1_fu_87_m_axi_dma_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_transfer_chunk_1_fu_87_m_axi_dma_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_transfer_chunk_1_fu_87_m_axi_dma_ARVALID : STD_LOGIC;
    signal grp_transfer_chunk_1_fu_87_m_axi_dma_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_transfer_chunk_1_fu_87_m_axi_dma_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_transfer_chunk_1_fu_87_m_axi_dma_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_transfer_chunk_1_fu_87_m_axi_dma_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_transfer_chunk_1_fu_87_m_axi_dma_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_transfer_chunk_1_fu_87_m_axi_dma_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_transfer_chunk_1_fu_87_m_axi_dma_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_transfer_chunk_1_fu_87_m_axi_dma_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_transfer_chunk_1_fu_87_m_axi_dma_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_transfer_chunk_1_fu_87_m_axi_dma_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_transfer_chunk_1_fu_87_m_axi_dma_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_transfer_chunk_1_fu_87_m_axi_dma_RREADY : STD_LOGIC;
    signal grp_transfer_chunk_1_fu_87_m_axi_dma_BREADY : STD_LOGIC;
    signal grp_transfer_chunk_fu_95_ap_start : STD_LOGIC;
    signal grp_transfer_chunk_fu_95_ap_done : STD_LOGIC;
    signal grp_transfer_chunk_fu_95_ap_idle : STD_LOGIC;
    signal grp_transfer_chunk_fu_95_ap_ready : STD_LOGIC;
    signal grp_transfer_chunk_fu_95_m_axi_dma_AWVALID : STD_LOGIC;
    signal grp_transfer_chunk_fu_95_m_axi_dma_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_transfer_chunk_fu_95_m_axi_dma_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_transfer_chunk_fu_95_m_axi_dma_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_transfer_chunk_fu_95_m_axi_dma_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_transfer_chunk_fu_95_m_axi_dma_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_transfer_chunk_fu_95_m_axi_dma_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_transfer_chunk_fu_95_m_axi_dma_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_transfer_chunk_fu_95_m_axi_dma_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_transfer_chunk_fu_95_m_axi_dma_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_transfer_chunk_fu_95_m_axi_dma_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_transfer_chunk_fu_95_m_axi_dma_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_transfer_chunk_fu_95_m_axi_dma_WVALID : STD_LOGIC;
    signal grp_transfer_chunk_fu_95_m_axi_dma_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_transfer_chunk_fu_95_m_axi_dma_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_transfer_chunk_fu_95_m_axi_dma_WLAST : STD_LOGIC;
    signal grp_transfer_chunk_fu_95_m_axi_dma_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_transfer_chunk_fu_95_m_axi_dma_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_transfer_chunk_fu_95_m_axi_dma_ARVALID : STD_LOGIC;
    signal grp_transfer_chunk_fu_95_m_axi_dma_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_transfer_chunk_fu_95_m_axi_dma_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_transfer_chunk_fu_95_m_axi_dma_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_transfer_chunk_fu_95_m_axi_dma_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_transfer_chunk_fu_95_m_axi_dma_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_transfer_chunk_fu_95_m_axi_dma_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_transfer_chunk_fu_95_m_axi_dma_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_transfer_chunk_fu_95_m_axi_dma_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_transfer_chunk_fu_95_m_axi_dma_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_transfer_chunk_fu_95_m_axi_dma_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_transfer_chunk_fu_95_m_axi_dma_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_transfer_chunk_fu_95_m_axi_dma_RREADY : STD_LOGIC;
    signal grp_transfer_chunk_fu_95_m_axi_dma_BREADY : STD_LOGIC;
    signal chunk_ctr_reg_76 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_transfer_chunk_1_fu_87_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_transfer_chunk_fu_95_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal mul_fu_160_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal grp_fu_141_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_141_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_fu_160_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_fu_160_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_141_ap_start : STD_LOGIC;
    signal grp_fu_141_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (26 downto 0);
    signal mul_fu_160_p10 : STD_LOGIC_VECTOR (37 downto 0);

    component transfer_chunk_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_dma_AWVALID : OUT STD_LOGIC;
        m_axi_dma_AWREADY : IN STD_LOGIC;
        m_axi_dma_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_dma_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_dma_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_dma_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_dma_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_dma_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_dma_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_dma_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_dma_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_dma_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_dma_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_dma_WVALID : OUT STD_LOGIC;
        m_axi_dma_WREADY : IN STD_LOGIC;
        m_axi_dma_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_dma_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_dma_WLAST : OUT STD_LOGIC;
        m_axi_dma_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_dma_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_dma_ARVALID : OUT STD_LOGIC;
        m_axi_dma_ARREADY : IN STD_LOGIC;
        m_axi_dma_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_dma_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_dma_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_dma_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_dma_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_dma_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_dma_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_dma_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_dma_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_dma_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_dma_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_dma_RVALID : IN STD_LOGIC;
        m_axi_dma_RREADY : OUT STD_LOGIC;
        m_axi_dma_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_dma_RLAST : IN STD_LOGIC;
        m_axi_dma_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_dma_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_dma_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_dma_BVALID : IN STD_LOGIC;
        m_axi_dma_BREADY : OUT STD_LOGIC;
        m_axi_dma_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_dma_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_dma_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        row : IN STD_LOGIC_VECTOR (9 downto 0);
        col : IN STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component transfer_chunk IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_dma_AWVALID : OUT STD_LOGIC;
        m_axi_dma_AWREADY : IN STD_LOGIC;
        m_axi_dma_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_dma_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_dma_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_dma_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_dma_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_dma_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_dma_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_dma_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_dma_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_dma_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_dma_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_dma_WVALID : OUT STD_LOGIC;
        m_axi_dma_WREADY : IN STD_LOGIC;
        m_axi_dma_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_dma_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_dma_WLAST : OUT STD_LOGIC;
        m_axi_dma_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_dma_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_dma_ARVALID : OUT STD_LOGIC;
        m_axi_dma_ARREADY : IN STD_LOGIC;
        m_axi_dma_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_dma_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_dma_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_dma_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_dma_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_dma_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_dma_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_dma_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_dma_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_dma_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_dma_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_dma_RVALID : IN STD_LOGIC;
        m_axi_dma_RREADY : OUT STD_LOGIC;
        m_axi_dma_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_dma_RLAST : IN STD_LOGIC;
        m_axi_dma_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_dma_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_dma_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_dma_BVALID : IN STD_LOGIC;
        m_axi_dma_BREADY : OUT STD_LOGIC;
        m_axi_dma_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_dma_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_dma_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        row : IN STD_LOGIC_VECTOR (9 downto 0);
        col : IN STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component dma_master_driverbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component dma_master_drivercud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (19 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (37 downto 0) );
    end component;


    component dma_master_driver_dma0_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    dma_master_driver_dma0_m_axi_U : component dma_master_driver_dma0_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DMA0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DMA0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DMA0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DMA0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DMA0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DMA0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DMA0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DMA0_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_DMA0_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_DMA0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DMA0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DMA0_CACHE_VALUE)
    port map (
        AWVALID => m_axi_dma0_AWVALID,
        AWREADY => m_axi_dma0_AWREADY,
        AWADDR => m_axi_dma0_AWADDR,
        AWID => m_axi_dma0_AWID,
        AWLEN => m_axi_dma0_AWLEN,
        AWSIZE => m_axi_dma0_AWSIZE,
        AWBURST => m_axi_dma0_AWBURST,
        AWLOCK => m_axi_dma0_AWLOCK,
        AWCACHE => m_axi_dma0_AWCACHE,
        AWPROT => m_axi_dma0_AWPROT,
        AWQOS => m_axi_dma0_AWQOS,
        AWREGION => m_axi_dma0_AWREGION,
        AWUSER => m_axi_dma0_AWUSER,
        WVALID => m_axi_dma0_WVALID,
        WREADY => m_axi_dma0_WREADY,
        WDATA => m_axi_dma0_WDATA,
        WSTRB => m_axi_dma0_WSTRB,
        WLAST => m_axi_dma0_WLAST,
        WID => m_axi_dma0_WID,
        WUSER => m_axi_dma0_WUSER,
        ARVALID => m_axi_dma0_ARVALID,
        ARREADY => m_axi_dma0_ARREADY,
        ARADDR => m_axi_dma0_ARADDR,
        ARID => m_axi_dma0_ARID,
        ARLEN => m_axi_dma0_ARLEN,
        ARSIZE => m_axi_dma0_ARSIZE,
        ARBURST => m_axi_dma0_ARBURST,
        ARLOCK => m_axi_dma0_ARLOCK,
        ARCACHE => m_axi_dma0_ARCACHE,
        ARPROT => m_axi_dma0_ARPROT,
        ARQOS => m_axi_dma0_ARQOS,
        ARREGION => m_axi_dma0_ARREGION,
        ARUSER => m_axi_dma0_ARUSER,
        RVALID => m_axi_dma0_RVALID,
        RREADY => m_axi_dma0_RREADY,
        RDATA => m_axi_dma0_RDATA,
        RLAST => m_axi_dma0_RLAST,
        RID => m_axi_dma0_RID,
        RUSER => m_axi_dma0_RUSER,
        RRESP => m_axi_dma0_RRESP,
        BVALID => m_axi_dma0_BVALID,
        BREADY => m_axi_dma0_BREADY,
        BRESP => m_axi_dma0_BRESP,
        BID => m_axi_dma0_BID,
        BUSER => m_axi_dma0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => dma0_ARVALID,
        I_ARREADY => dma0_ARREADY,
        I_ARADDR => dma0_ARADDR,
        I_ARID => dma0_ARID,
        I_ARLEN => dma0_ARLEN,
        I_ARSIZE => dma0_ARSIZE,
        I_ARLOCK => dma0_ARLOCK,
        I_ARCACHE => dma0_ARCACHE,
        I_ARQOS => dma0_ARQOS,
        I_ARPROT => dma0_ARPROT,
        I_ARUSER => dma0_ARUSER,
        I_ARBURST => dma0_ARBURST,
        I_ARREGION => dma0_ARREGION,
        I_RVALID => dma0_RVALID,
        I_RREADY => dma0_RREADY,
        I_RDATA => dma0_RDATA,
        I_RID => dma0_RID,
        I_RUSER => dma0_RUSER,
        I_RRESP => dma0_RRESP,
        I_RLAST => dma0_RLAST,
        I_AWVALID => dma0_AWVALID,
        I_AWREADY => dma0_AWREADY,
        I_AWADDR => dma0_AWADDR,
        I_AWID => dma0_AWID,
        I_AWLEN => dma0_AWLEN,
        I_AWSIZE => dma0_AWSIZE,
        I_AWLOCK => dma0_AWLOCK,
        I_AWCACHE => dma0_AWCACHE,
        I_AWQOS => dma0_AWQOS,
        I_AWPROT => dma0_AWPROT,
        I_AWUSER => dma0_AWUSER,
        I_AWBURST => dma0_AWBURST,
        I_AWREGION => dma0_AWREGION,
        I_WVALID => dma0_WVALID,
        I_WREADY => dma0_WREADY,
        I_WDATA => dma0_WDATA,
        I_WID => dma0_WID,
        I_WUSER => dma0_WUSER,
        I_WLAST => dma0_WLAST,
        I_WSTRB => dma0_WSTRB,
        I_BVALID => dma0_BVALID,
        I_BREADY => dma0_BREADY,
        I_BRESP => dma0_BRESP,
        I_BID => dma0_BID,
        I_BUSER => dma0_BUSER);

    grp_transfer_chunk_1_fu_87 : component transfer_chunk_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_transfer_chunk_1_fu_87_ap_start,
        ap_done => grp_transfer_chunk_1_fu_87_ap_done,
        ap_idle => grp_transfer_chunk_1_fu_87_ap_idle,
        ap_ready => grp_transfer_chunk_1_fu_87_ap_ready,
        m_axi_dma_AWVALID => grp_transfer_chunk_1_fu_87_m_axi_dma_AWVALID,
        m_axi_dma_AWREADY => dma0_AWREADY,
        m_axi_dma_AWADDR => grp_transfer_chunk_1_fu_87_m_axi_dma_AWADDR,
        m_axi_dma_AWID => grp_transfer_chunk_1_fu_87_m_axi_dma_AWID,
        m_axi_dma_AWLEN => grp_transfer_chunk_1_fu_87_m_axi_dma_AWLEN,
        m_axi_dma_AWSIZE => grp_transfer_chunk_1_fu_87_m_axi_dma_AWSIZE,
        m_axi_dma_AWBURST => grp_transfer_chunk_1_fu_87_m_axi_dma_AWBURST,
        m_axi_dma_AWLOCK => grp_transfer_chunk_1_fu_87_m_axi_dma_AWLOCK,
        m_axi_dma_AWCACHE => grp_transfer_chunk_1_fu_87_m_axi_dma_AWCACHE,
        m_axi_dma_AWPROT => grp_transfer_chunk_1_fu_87_m_axi_dma_AWPROT,
        m_axi_dma_AWQOS => grp_transfer_chunk_1_fu_87_m_axi_dma_AWQOS,
        m_axi_dma_AWREGION => grp_transfer_chunk_1_fu_87_m_axi_dma_AWREGION,
        m_axi_dma_AWUSER => grp_transfer_chunk_1_fu_87_m_axi_dma_AWUSER,
        m_axi_dma_WVALID => grp_transfer_chunk_1_fu_87_m_axi_dma_WVALID,
        m_axi_dma_WREADY => dma0_WREADY,
        m_axi_dma_WDATA => grp_transfer_chunk_1_fu_87_m_axi_dma_WDATA,
        m_axi_dma_WSTRB => grp_transfer_chunk_1_fu_87_m_axi_dma_WSTRB,
        m_axi_dma_WLAST => grp_transfer_chunk_1_fu_87_m_axi_dma_WLAST,
        m_axi_dma_WID => grp_transfer_chunk_1_fu_87_m_axi_dma_WID,
        m_axi_dma_WUSER => grp_transfer_chunk_1_fu_87_m_axi_dma_WUSER,
        m_axi_dma_ARVALID => grp_transfer_chunk_1_fu_87_m_axi_dma_ARVALID,
        m_axi_dma_ARREADY => dma0_ARREADY,
        m_axi_dma_ARADDR => grp_transfer_chunk_1_fu_87_m_axi_dma_ARADDR,
        m_axi_dma_ARID => grp_transfer_chunk_1_fu_87_m_axi_dma_ARID,
        m_axi_dma_ARLEN => grp_transfer_chunk_1_fu_87_m_axi_dma_ARLEN,
        m_axi_dma_ARSIZE => grp_transfer_chunk_1_fu_87_m_axi_dma_ARSIZE,
        m_axi_dma_ARBURST => grp_transfer_chunk_1_fu_87_m_axi_dma_ARBURST,
        m_axi_dma_ARLOCK => grp_transfer_chunk_1_fu_87_m_axi_dma_ARLOCK,
        m_axi_dma_ARCACHE => grp_transfer_chunk_1_fu_87_m_axi_dma_ARCACHE,
        m_axi_dma_ARPROT => grp_transfer_chunk_1_fu_87_m_axi_dma_ARPROT,
        m_axi_dma_ARQOS => grp_transfer_chunk_1_fu_87_m_axi_dma_ARQOS,
        m_axi_dma_ARREGION => grp_transfer_chunk_1_fu_87_m_axi_dma_ARREGION,
        m_axi_dma_ARUSER => grp_transfer_chunk_1_fu_87_m_axi_dma_ARUSER,
        m_axi_dma_RVALID => dma0_RVALID,
        m_axi_dma_RREADY => grp_transfer_chunk_1_fu_87_m_axi_dma_RREADY,
        m_axi_dma_RDATA => dma0_RDATA,
        m_axi_dma_RLAST => dma0_RLAST,
        m_axi_dma_RID => dma0_RID,
        m_axi_dma_RUSER => dma0_RUSER,
        m_axi_dma_RRESP => dma0_RRESP,
        m_axi_dma_BVALID => dma0_BVALID,
        m_axi_dma_BREADY => grp_transfer_chunk_1_fu_87_m_axi_dma_BREADY,
        m_axi_dma_BRESP => dma0_BRESP,
        m_axi_dma_BID => dma0_BID,
        m_axi_dma_BUSER => dma0_BUSER,
        row => input_row_reg_190,
        col => tmp_2_reg_196);

    grp_transfer_chunk_fu_95 : component transfer_chunk
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_transfer_chunk_fu_95_ap_start,
        ap_done => grp_transfer_chunk_fu_95_ap_done,
        ap_idle => grp_transfer_chunk_fu_95_ap_idle,
        ap_ready => grp_transfer_chunk_fu_95_ap_ready,
        m_axi_dma_AWVALID => grp_transfer_chunk_fu_95_m_axi_dma_AWVALID,
        m_axi_dma_AWREADY => dma0_AWREADY,
        m_axi_dma_AWADDR => grp_transfer_chunk_fu_95_m_axi_dma_AWADDR,
        m_axi_dma_AWID => grp_transfer_chunk_fu_95_m_axi_dma_AWID,
        m_axi_dma_AWLEN => grp_transfer_chunk_fu_95_m_axi_dma_AWLEN,
        m_axi_dma_AWSIZE => grp_transfer_chunk_fu_95_m_axi_dma_AWSIZE,
        m_axi_dma_AWBURST => grp_transfer_chunk_fu_95_m_axi_dma_AWBURST,
        m_axi_dma_AWLOCK => grp_transfer_chunk_fu_95_m_axi_dma_AWLOCK,
        m_axi_dma_AWCACHE => grp_transfer_chunk_fu_95_m_axi_dma_AWCACHE,
        m_axi_dma_AWPROT => grp_transfer_chunk_fu_95_m_axi_dma_AWPROT,
        m_axi_dma_AWQOS => grp_transfer_chunk_fu_95_m_axi_dma_AWQOS,
        m_axi_dma_AWREGION => grp_transfer_chunk_fu_95_m_axi_dma_AWREGION,
        m_axi_dma_AWUSER => grp_transfer_chunk_fu_95_m_axi_dma_AWUSER,
        m_axi_dma_WVALID => grp_transfer_chunk_fu_95_m_axi_dma_WVALID,
        m_axi_dma_WREADY => dma0_WREADY,
        m_axi_dma_WDATA => grp_transfer_chunk_fu_95_m_axi_dma_WDATA,
        m_axi_dma_WSTRB => grp_transfer_chunk_fu_95_m_axi_dma_WSTRB,
        m_axi_dma_WLAST => grp_transfer_chunk_fu_95_m_axi_dma_WLAST,
        m_axi_dma_WID => grp_transfer_chunk_fu_95_m_axi_dma_WID,
        m_axi_dma_WUSER => grp_transfer_chunk_fu_95_m_axi_dma_WUSER,
        m_axi_dma_ARVALID => grp_transfer_chunk_fu_95_m_axi_dma_ARVALID,
        m_axi_dma_ARREADY => dma0_ARREADY,
        m_axi_dma_ARADDR => grp_transfer_chunk_fu_95_m_axi_dma_ARADDR,
        m_axi_dma_ARID => grp_transfer_chunk_fu_95_m_axi_dma_ARID,
        m_axi_dma_ARLEN => grp_transfer_chunk_fu_95_m_axi_dma_ARLEN,
        m_axi_dma_ARSIZE => grp_transfer_chunk_fu_95_m_axi_dma_ARSIZE,
        m_axi_dma_ARBURST => grp_transfer_chunk_fu_95_m_axi_dma_ARBURST,
        m_axi_dma_ARLOCK => grp_transfer_chunk_fu_95_m_axi_dma_ARLOCK,
        m_axi_dma_ARCACHE => grp_transfer_chunk_fu_95_m_axi_dma_ARCACHE,
        m_axi_dma_ARPROT => grp_transfer_chunk_fu_95_m_axi_dma_ARPROT,
        m_axi_dma_ARQOS => grp_transfer_chunk_fu_95_m_axi_dma_ARQOS,
        m_axi_dma_ARREGION => grp_transfer_chunk_fu_95_m_axi_dma_ARREGION,
        m_axi_dma_ARUSER => grp_transfer_chunk_fu_95_m_axi_dma_ARUSER,
        m_axi_dma_RVALID => dma0_RVALID,
        m_axi_dma_RREADY => grp_transfer_chunk_fu_95_m_axi_dma_RREADY,
        m_axi_dma_RDATA => dma0_RDATA,
        m_axi_dma_RLAST => dma0_RLAST,
        m_axi_dma_RID => dma0_RID,
        m_axi_dma_RUSER => dma0_RUSER,
        m_axi_dma_RRESP => dma0_RRESP,
        m_axi_dma_BVALID => dma0_BVALID,
        m_axi_dma_BREADY => grp_transfer_chunk_fu_95_m_axi_dma_BREADY,
        m_axi_dma_BRESP => dma0_BRESP,
        m_axi_dma_BID => dma0_BID,
        m_axi_dma_BUSER => dma0_BUSER,
        row => input_row_reg_190,
        col => tmp_2_reg_196);

    dma_master_driverbkb_U11 : component dma_master_driverbkb
    generic map (
        ID => 1,
        NUM_STAGE => 22,
        din0_WIDTH => 18,
        din1_WIDTH => 12,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_141_ap_start,
        done => grp_fu_141_ap_done,
        din0 => tmp_fu_120_p3,
        din1 => grp_fu_141_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_141_p2);

    dma_master_drivercud_U12 : component dma_master_drivercud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 20,
        din1_WIDTH => 18,
        dout_WIDTH => 38)
    port map (
        din0 => mul_fu_160_p0,
        din1 => mul_fu_160_p1,
        dout => mul_fu_160_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_transfer_chunk_1_fu_87_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_transfer_chunk_1_fu_87_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                    grp_transfer_chunk_1_fu_87_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_transfer_chunk_1_fu_87_ap_ready = ap_const_logic_1)) then 
                    grp_transfer_chunk_1_fu_87_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_transfer_chunk_fu_95_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_transfer_chunk_fu_95_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                    grp_transfer_chunk_fu_95_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_transfer_chunk_fu_95_ap_ready = ap_const_logic_1)) then 
                    grp_transfer_chunk_fu_95_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    chunk_ctr_reg_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_transfer_chunk_fu_95_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
                chunk_ctr_reg_76 <= chunk_ctr_1_reg_175;
            elsif ((not((frame_trigger_V_read_read_fu_70_p2 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                chunk_ctr_reg_76 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                chunk_ctr_1_reg_175 <= chunk_ctr_1_fu_114_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                    input_row_reg_190(9 downto 2) <= input_row_fu_147_p3(9 downto 2);
                tmp_2_reg_196 <= tmp_2_fu_155_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_108_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_1_reg_185 <= mul_fu_160_p2(36 downto 29);
            end if;
        end if;
    end process;
    input_row_reg_190(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (frame_trigger_V_read_read_fu_70_p2, ap_CS_fsm, ap_CS_fsm_state3, exitcond_fu_108_p2, grp_transfer_chunk_1_fu_87_ap_done, grp_transfer_chunk_fu_95_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state27, ap_CS_fsm_state25)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if ((not((frame_trigger_V_read_read_fu_70_p2 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond_fu_108_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((grp_transfer_chunk_1_fu_87_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                if (((grp_transfer_chunk_fu_95_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    chunk_ctr_1_fu_114_p2 <= std_logic_vector(unsigned(chunk_ctr_reg_76) + unsigned(ap_const_lv10_1));

    dma0_ARADDR_assign_proc : process(ap_CS_fsm_state24, grp_transfer_chunk_1_fu_87_m_axi_dma_ARADDR, grp_transfer_chunk_fu_95_m_axi_dma_ARADDR, ap_CS_fsm_state27, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            dma0_ARADDR <= grp_transfer_chunk_fu_95_m_axi_dma_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            dma0_ARADDR <= grp_transfer_chunk_1_fu_87_m_axi_dma_ARADDR;
        else 
            dma0_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dma0_ARBURST_assign_proc : process(ap_CS_fsm_state24, grp_transfer_chunk_1_fu_87_m_axi_dma_ARBURST, grp_transfer_chunk_fu_95_m_axi_dma_ARBURST, ap_CS_fsm_state27, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            dma0_ARBURST <= grp_transfer_chunk_fu_95_m_axi_dma_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            dma0_ARBURST <= grp_transfer_chunk_1_fu_87_m_axi_dma_ARBURST;
        else 
            dma0_ARBURST <= "XX";
        end if; 
    end process;


    dma0_ARCACHE_assign_proc : process(ap_CS_fsm_state24, grp_transfer_chunk_1_fu_87_m_axi_dma_ARCACHE, grp_transfer_chunk_fu_95_m_axi_dma_ARCACHE, ap_CS_fsm_state27, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            dma0_ARCACHE <= grp_transfer_chunk_fu_95_m_axi_dma_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            dma0_ARCACHE <= grp_transfer_chunk_1_fu_87_m_axi_dma_ARCACHE;
        else 
            dma0_ARCACHE <= "XXXX";
        end if; 
    end process;


    dma0_ARID_assign_proc : process(ap_CS_fsm_state24, grp_transfer_chunk_1_fu_87_m_axi_dma_ARID, grp_transfer_chunk_fu_95_m_axi_dma_ARID, ap_CS_fsm_state27, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            dma0_ARID <= grp_transfer_chunk_fu_95_m_axi_dma_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            dma0_ARID <= grp_transfer_chunk_1_fu_87_m_axi_dma_ARID;
        else 
            dma0_ARID <= "X";
        end if; 
    end process;


    dma0_ARLEN_assign_proc : process(ap_CS_fsm_state24, grp_transfer_chunk_1_fu_87_m_axi_dma_ARLEN, grp_transfer_chunk_fu_95_m_axi_dma_ARLEN, ap_CS_fsm_state27, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            dma0_ARLEN <= grp_transfer_chunk_fu_95_m_axi_dma_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            dma0_ARLEN <= grp_transfer_chunk_1_fu_87_m_axi_dma_ARLEN;
        else 
            dma0_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dma0_ARLOCK_assign_proc : process(ap_CS_fsm_state24, grp_transfer_chunk_1_fu_87_m_axi_dma_ARLOCK, grp_transfer_chunk_fu_95_m_axi_dma_ARLOCK, ap_CS_fsm_state27, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            dma0_ARLOCK <= grp_transfer_chunk_fu_95_m_axi_dma_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            dma0_ARLOCK <= grp_transfer_chunk_1_fu_87_m_axi_dma_ARLOCK;
        else 
            dma0_ARLOCK <= "XX";
        end if; 
    end process;


    dma0_ARPROT_assign_proc : process(ap_CS_fsm_state24, grp_transfer_chunk_1_fu_87_m_axi_dma_ARPROT, grp_transfer_chunk_fu_95_m_axi_dma_ARPROT, ap_CS_fsm_state27, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            dma0_ARPROT <= grp_transfer_chunk_fu_95_m_axi_dma_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            dma0_ARPROT <= grp_transfer_chunk_1_fu_87_m_axi_dma_ARPROT;
        else 
            dma0_ARPROT <= "XXX";
        end if; 
    end process;


    dma0_ARQOS_assign_proc : process(ap_CS_fsm_state24, grp_transfer_chunk_1_fu_87_m_axi_dma_ARQOS, grp_transfer_chunk_fu_95_m_axi_dma_ARQOS, ap_CS_fsm_state27, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            dma0_ARQOS <= grp_transfer_chunk_fu_95_m_axi_dma_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            dma0_ARQOS <= grp_transfer_chunk_1_fu_87_m_axi_dma_ARQOS;
        else 
            dma0_ARQOS <= "XXXX";
        end if; 
    end process;


    dma0_ARREGION_assign_proc : process(ap_CS_fsm_state24, grp_transfer_chunk_1_fu_87_m_axi_dma_ARREGION, grp_transfer_chunk_fu_95_m_axi_dma_ARREGION, ap_CS_fsm_state27, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            dma0_ARREGION <= grp_transfer_chunk_fu_95_m_axi_dma_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            dma0_ARREGION <= grp_transfer_chunk_1_fu_87_m_axi_dma_ARREGION;
        else 
            dma0_ARREGION <= "XXXX";
        end if; 
    end process;


    dma0_ARSIZE_assign_proc : process(ap_CS_fsm_state24, grp_transfer_chunk_1_fu_87_m_axi_dma_ARSIZE, grp_transfer_chunk_fu_95_m_axi_dma_ARSIZE, ap_CS_fsm_state27, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            dma0_ARSIZE <= grp_transfer_chunk_fu_95_m_axi_dma_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            dma0_ARSIZE <= grp_transfer_chunk_1_fu_87_m_axi_dma_ARSIZE;
        else 
            dma0_ARSIZE <= "XXX";
        end if; 
    end process;


    dma0_ARUSER_assign_proc : process(ap_CS_fsm_state24, grp_transfer_chunk_1_fu_87_m_axi_dma_ARUSER, grp_transfer_chunk_fu_95_m_axi_dma_ARUSER, ap_CS_fsm_state27, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            dma0_ARUSER <= grp_transfer_chunk_fu_95_m_axi_dma_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            dma0_ARUSER <= grp_transfer_chunk_1_fu_87_m_axi_dma_ARUSER;
        else 
            dma0_ARUSER <= "X";
        end if; 
    end process;


    dma0_ARVALID_assign_proc : process(ap_CS_fsm_state24, grp_transfer_chunk_1_fu_87_m_axi_dma_ARVALID, grp_transfer_chunk_fu_95_m_axi_dma_ARVALID, ap_CS_fsm_state27, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            dma0_ARVALID <= grp_transfer_chunk_fu_95_m_axi_dma_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            dma0_ARVALID <= grp_transfer_chunk_1_fu_87_m_axi_dma_ARVALID;
        else 
            dma0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    dma0_AWADDR_assign_proc : process(ap_CS_fsm_state24, grp_transfer_chunk_1_fu_87_m_axi_dma_AWADDR, grp_transfer_chunk_fu_95_m_axi_dma_AWADDR, ap_CS_fsm_state27, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            dma0_AWADDR <= grp_transfer_chunk_fu_95_m_axi_dma_AWADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            dma0_AWADDR <= grp_transfer_chunk_1_fu_87_m_axi_dma_AWADDR;
        else 
            dma0_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dma0_AWBURST_assign_proc : process(ap_CS_fsm_state24, grp_transfer_chunk_1_fu_87_m_axi_dma_AWBURST, grp_transfer_chunk_fu_95_m_axi_dma_AWBURST, ap_CS_fsm_state27, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            dma0_AWBURST <= grp_transfer_chunk_fu_95_m_axi_dma_AWBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            dma0_AWBURST <= grp_transfer_chunk_1_fu_87_m_axi_dma_AWBURST;
        else 
            dma0_AWBURST <= "XX";
        end if; 
    end process;


    dma0_AWCACHE_assign_proc : process(ap_CS_fsm_state24, grp_transfer_chunk_1_fu_87_m_axi_dma_AWCACHE, grp_transfer_chunk_fu_95_m_axi_dma_AWCACHE, ap_CS_fsm_state27, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            dma0_AWCACHE <= grp_transfer_chunk_fu_95_m_axi_dma_AWCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            dma0_AWCACHE <= grp_transfer_chunk_1_fu_87_m_axi_dma_AWCACHE;
        else 
            dma0_AWCACHE <= "XXXX";
        end if; 
    end process;


    dma0_AWID_assign_proc : process(ap_CS_fsm_state24, grp_transfer_chunk_1_fu_87_m_axi_dma_AWID, grp_transfer_chunk_fu_95_m_axi_dma_AWID, ap_CS_fsm_state27, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            dma0_AWID <= grp_transfer_chunk_fu_95_m_axi_dma_AWID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            dma0_AWID <= grp_transfer_chunk_1_fu_87_m_axi_dma_AWID;
        else 
            dma0_AWID <= "X";
        end if; 
    end process;


    dma0_AWLEN_assign_proc : process(ap_CS_fsm_state24, grp_transfer_chunk_1_fu_87_m_axi_dma_AWLEN, grp_transfer_chunk_fu_95_m_axi_dma_AWLEN, ap_CS_fsm_state27, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            dma0_AWLEN <= grp_transfer_chunk_fu_95_m_axi_dma_AWLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            dma0_AWLEN <= grp_transfer_chunk_1_fu_87_m_axi_dma_AWLEN;
        else 
            dma0_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dma0_AWLOCK_assign_proc : process(ap_CS_fsm_state24, grp_transfer_chunk_1_fu_87_m_axi_dma_AWLOCK, grp_transfer_chunk_fu_95_m_axi_dma_AWLOCK, ap_CS_fsm_state27, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            dma0_AWLOCK <= grp_transfer_chunk_fu_95_m_axi_dma_AWLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            dma0_AWLOCK <= grp_transfer_chunk_1_fu_87_m_axi_dma_AWLOCK;
        else 
            dma0_AWLOCK <= "XX";
        end if; 
    end process;


    dma0_AWPROT_assign_proc : process(ap_CS_fsm_state24, grp_transfer_chunk_1_fu_87_m_axi_dma_AWPROT, grp_transfer_chunk_fu_95_m_axi_dma_AWPROT, ap_CS_fsm_state27, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            dma0_AWPROT <= grp_transfer_chunk_fu_95_m_axi_dma_AWPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            dma0_AWPROT <= grp_transfer_chunk_1_fu_87_m_axi_dma_AWPROT;
        else 
            dma0_AWPROT <= "XXX";
        end if; 
    end process;


    dma0_AWQOS_assign_proc : process(ap_CS_fsm_state24, grp_transfer_chunk_1_fu_87_m_axi_dma_AWQOS, grp_transfer_chunk_fu_95_m_axi_dma_AWQOS, ap_CS_fsm_state27, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            dma0_AWQOS <= grp_transfer_chunk_fu_95_m_axi_dma_AWQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            dma0_AWQOS <= grp_transfer_chunk_1_fu_87_m_axi_dma_AWQOS;
        else 
            dma0_AWQOS <= "XXXX";
        end if; 
    end process;


    dma0_AWREGION_assign_proc : process(ap_CS_fsm_state24, grp_transfer_chunk_1_fu_87_m_axi_dma_AWREGION, grp_transfer_chunk_fu_95_m_axi_dma_AWREGION, ap_CS_fsm_state27, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            dma0_AWREGION <= grp_transfer_chunk_fu_95_m_axi_dma_AWREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            dma0_AWREGION <= grp_transfer_chunk_1_fu_87_m_axi_dma_AWREGION;
        else 
            dma0_AWREGION <= "XXXX";
        end if; 
    end process;


    dma0_AWSIZE_assign_proc : process(ap_CS_fsm_state24, grp_transfer_chunk_1_fu_87_m_axi_dma_AWSIZE, grp_transfer_chunk_fu_95_m_axi_dma_AWSIZE, ap_CS_fsm_state27, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            dma0_AWSIZE <= grp_transfer_chunk_fu_95_m_axi_dma_AWSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            dma0_AWSIZE <= grp_transfer_chunk_1_fu_87_m_axi_dma_AWSIZE;
        else 
            dma0_AWSIZE <= "XXX";
        end if; 
    end process;


    dma0_AWUSER_assign_proc : process(ap_CS_fsm_state24, grp_transfer_chunk_1_fu_87_m_axi_dma_AWUSER, grp_transfer_chunk_fu_95_m_axi_dma_AWUSER, ap_CS_fsm_state27, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            dma0_AWUSER <= grp_transfer_chunk_fu_95_m_axi_dma_AWUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            dma0_AWUSER <= grp_transfer_chunk_1_fu_87_m_axi_dma_AWUSER;
        else 
            dma0_AWUSER <= "X";
        end if; 
    end process;


    dma0_AWVALID_assign_proc : process(ap_CS_fsm_state24, grp_transfer_chunk_1_fu_87_m_axi_dma_AWVALID, grp_transfer_chunk_fu_95_m_axi_dma_AWVALID, ap_CS_fsm_state27, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            dma0_AWVALID <= grp_transfer_chunk_fu_95_m_axi_dma_AWVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            dma0_AWVALID <= grp_transfer_chunk_1_fu_87_m_axi_dma_AWVALID;
        else 
            dma0_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    dma0_BREADY_assign_proc : process(ap_CS_fsm_state24, grp_transfer_chunk_1_fu_87_m_axi_dma_BREADY, grp_transfer_chunk_fu_95_m_axi_dma_BREADY, ap_CS_fsm_state27, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            dma0_BREADY <= grp_transfer_chunk_fu_95_m_axi_dma_BREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            dma0_BREADY <= grp_transfer_chunk_1_fu_87_m_axi_dma_BREADY;
        else 
            dma0_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    dma0_RREADY_assign_proc : process(ap_CS_fsm_state24, grp_transfer_chunk_1_fu_87_m_axi_dma_RREADY, grp_transfer_chunk_fu_95_m_axi_dma_RREADY, ap_CS_fsm_state27, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            dma0_RREADY <= grp_transfer_chunk_fu_95_m_axi_dma_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            dma0_RREADY <= grp_transfer_chunk_1_fu_87_m_axi_dma_RREADY;
        else 
            dma0_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    dma0_WDATA_assign_proc : process(ap_CS_fsm_state24, grp_transfer_chunk_1_fu_87_m_axi_dma_WDATA, grp_transfer_chunk_fu_95_m_axi_dma_WDATA, ap_CS_fsm_state27, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            dma0_WDATA <= grp_transfer_chunk_fu_95_m_axi_dma_WDATA;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            dma0_WDATA <= grp_transfer_chunk_1_fu_87_m_axi_dma_WDATA;
        else 
            dma0_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dma0_WID_assign_proc : process(ap_CS_fsm_state24, grp_transfer_chunk_1_fu_87_m_axi_dma_WID, grp_transfer_chunk_fu_95_m_axi_dma_WID, ap_CS_fsm_state27, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            dma0_WID <= grp_transfer_chunk_fu_95_m_axi_dma_WID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            dma0_WID <= grp_transfer_chunk_1_fu_87_m_axi_dma_WID;
        else 
            dma0_WID <= "X";
        end if; 
    end process;


    dma0_WLAST_assign_proc : process(ap_CS_fsm_state24, grp_transfer_chunk_1_fu_87_m_axi_dma_WLAST, grp_transfer_chunk_fu_95_m_axi_dma_WLAST, ap_CS_fsm_state27, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            dma0_WLAST <= grp_transfer_chunk_fu_95_m_axi_dma_WLAST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            dma0_WLAST <= grp_transfer_chunk_1_fu_87_m_axi_dma_WLAST;
        else 
            dma0_WLAST <= 'X';
        end if; 
    end process;


    dma0_WSTRB_assign_proc : process(ap_CS_fsm_state24, grp_transfer_chunk_1_fu_87_m_axi_dma_WSTRB, grp_transfer_chunk_fu_95_m_axi_dma_WSTRB, ap_CS_fsm_state27, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            dma0_WSTRB <= grp_transfer_chunk_fu_95_m_axi_dma_WSTRB;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            dma0_WSTRB <= grp_transfer_chunk_1_fu_87_m_axi_dma_WSTRB;
        else 
            dma0_WSTRB <= "XXXX";
        end if; 
    end process;


    dma0_WUSER_assign_proc : process(ap_CS_fsm_state24, grp_transfer_chunk_1_fu_87_m_axi_dma_WUSER, grp_transfer_chunk_fu_95_m_axi_dma_WUSER, ap_CS_fsm_state27, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            dma0_WUSER <= grp_transfer_chunk_fu_95_m_axi_dma_WUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            dma0_WUSER <= grp_transfer_chunk_1_fu_87_m_axi_dma_WUSER;
        else 
            dma0_WUSER <= "X";
        end if; 
    end process;


    dma0_WVALID_assign_proc : process(ap_CS_fsm_state24, grp_transfer_chunk_1_fu_87_m_axi_dma_WVALID, grp_transfer_chunk_fu_95_m_axi_dma_WVALID, ap_CS_fsm_state27, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            dma0_WVALID <= grp_transfer_chunk_fu_95_m_axi_dma_WVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            dma0_WVALID <= grp_transfer_chunk_1_fu_87_m_axi_dma_WVALID;
        else 
            dma0_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_108_p2 <= "1" when (chunk_ctr_reg_76 = ap_const_lv10_384) else "0";
    frame_trigger_V_read_read_fu_70_p2 <= frame_trigger_V;

    grp_fu_141_ap_start_assign_proc : process(ap_CS_fsm_state3, exitcond_fu_108_p2)
    begin
        if (((exitcond_fu_108_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_fu_141_ap_start <= ap_const_logic_1;
        else 
            grp_fu_141_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_141_p1 <= ap_const_lv18_500(12 - 1 downto 0);
    grp_transfer_chunk_1_fu_87_ap_start <= grp_transfer_chunk_1_fu_87_ap_start_reg;
    grp_transfer_chunk_fu_95_ap_start <= grp_transfer_chunk_fu_95_ap_start_reg;
    input_row_fu_147_p3 <= (tmp_1_reg_185 & ap_const_lv2_0);
    m_axi_dma1_ARADDR <= ap_const_lv32_0;
    m_axi_dma1_ARBURST <= ap_const_lv2_0;
    m_axi_dma1_ARCACHE <= ap_const_lv4_0;
    m_axi_dma1_ARID <= ap_const_lv1_0;
    m_axi_dma1_ARLEN <= ap_const_lv8_0;
    m_axi_dma1_ARLOCK <= ap_const_lv2_0;
    m_axi_dma1_ARPROT <= ap_const_lv3_0;
    m_axi_dma1_ARQOS <= ap_const_lv4_0;
    m_axi_dma1_ARREGION <= ap_const_lv4_0;
    m_axi_dma1_ARSIZE <= ap_const_lv3_0;
    m_axi_dma1_ARUSER <= ap_const_lv1_0;
    m_axi_dma1_ARVALID <= ap_const_logic_0;
    m_axi_dma1_AWADDR <= ap_const_lv32_0;
    m_axi_dma1_AWBURST <= ap_const_lv2_0;
    m_axi_dma1_AWCACHE <= ap_const_lv4_0;
    m_axi_dma1_AWID <= ap_const_lv1_0;
    m_axi_dma1_AWLEN <= ap_const_lv8_0;
    m_axi_dma1_AWLOCK <= ap_const_lv2_0;
    m_axi_dma1_AWPROT <= ap_const_lv3_0;
    m_axi_dma1_AWQOS <= ap_const_lv4_0;
    m_axi_dma1_AWREGION <= ap_const_lv4_0;
    m_axi_dma1_AWSIZE <= ap_const_lv3_0;
    m_axi_dma1_AWUSER <= ap_const_lv1_0;
    m_axi_dma1_AWVALID <= ap_const_logic_0;
    m_axi_dma1_BREADY <= ap_const_logic_0;
    m_axi_dma1_RREADY <= ap_const_logic_0;
    m_axi_dma1_WDATA <= ap_const_lv32_0;
    m_axi_dma1_WID <= ap_const_lv1_0;
    m_axi_dma1_WLAST <= ap_const_logic_0;
    m_axi_dma1_WSTRB <= ap_const_lv4_0;
    m_axi_dma1_WUSER <= ap_const_lv1_0;
    m_axi_dma1_WVALID <= ap_const_logic_0;
    mul_fu_160_p0 <= ap_const_lv38_66667(20 - 1 downto 0);
    mul_fu_160_p1 <= mul_fu_160_p10(18 - 1 downto 0);
    mul_fu_160_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_120_p3),38));
    tmp_2_fu_155_p1 <= grp_fu_141_p2(11 - 1 downto 0);
    tmp_fu_120_p3 <= (chunk_ctr_reg_76 & ap_const_lv8_0);
end behav;
