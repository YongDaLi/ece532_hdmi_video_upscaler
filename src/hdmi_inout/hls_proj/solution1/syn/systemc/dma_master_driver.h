// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _dma_master_driver_HH_
#define _dma_master_driver_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "transfer_chunk_1.h"
#include "transfer_chunk.h"
#include "dma_master_driverbkb.h"
#include "dma_master_drivercud.h"
#include "dma_master_driver_dma0_m_axi.h"

namespace ap_rtl {

template<unsigned int C_M_AXI_DMA0_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_DMA0_ID_WIDTH = 1,
         unsigned int C_M_AXI_DMA0_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_DMA0_DATA_WIDTH = 32,
         unsigned int C_M_AXI_DMA0_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_DMA0_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_DMA0_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_DMA0_BUSER_WIDTH = 1,
         unsigned int C_M_AXI_DMA1_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_DMA1_ID_WIDTH = 1,
         unsigned int C_M_AXI_DMA1_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_DMA1_DATA_WIDTH = 32,
         unsigned int C_M_AXI_DMA1_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_DMA1_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_DMA1_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_DMA1_BUSER_WIDTH = 1>
struct dma_master_driver : public sc_module {
    // Port declarations 93
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > m_axi_dma0_AWVALID;
    sc_in< sc_logic > m_axi_dma0_AWREADY;
    sc_out< sc_uint<C_M_AXI_DMA0_ADDR_WIDTH> > m_axi_dma0_AWADDR;
    sc_out< sc_uint<C_M_AXI_DMA0_ID_WIDTH> > m_axi_dma0_AWID;
    sc_out< sc_lv<8> > m_axi_dma0_AWLEN;
    sc_out< sc_lv<3> > m_axi_dma0_AWSIZE;
    sc_out< sc_lv<2> > m_axi_dma0_AWBURST;
    sc_out< sc_lv<2> > m_axi_dma0_AWLOCK;
    sc_out< sc_lv<4> > m_axi_dma0_AWCACHE;
    sc_out< sc_lv<3> > m_axi_dma0_AWPROT;
    sc_out< sc_lv<4> > m_axi_dma0_AWQOS;
    sc_out< sc_lv<4> > m_axi_dma0_AWREGION;
    sc_out< sc_uint<C_M_AXI_DMA0_AWUSER_WIDTH> > m_axi_dma0_AWUSER;
    sc_out< sc_logic > m_axi_dma0_WVALID;
    sc_in< sc_logic > m_axi_dma0_WREADY;
    sc_out< sc_uint<C_M_AXI_DMA0_DATA_WIDTH> > m_axi_dma0_WDATA;
    sc_out< sc_uint<C_M_AXI_DMA0_DATA_WIDTH/8> > m_axi_dma0_WSTRB;
    sc_out< sc_logic > m_axi_dma0_WLAST;
    sc_out< sc_uint<C_M_AXI_DMA0_ID_WIDTH> > m_axi_dma0_WID;
    sc_out< sc_uint<C_M_AXI_DMA0_WUSER_WIDTH> > m_axi_dma0_WUSER;
    sc_out< sc_logic > m_axi_dma0_ARVALID;
    sc_in< sc_logic > m_axi_dma0_ARREADY;
    sc_out< sc_uint<C_M_AXI_DMA0_ADDR_WIDTH> > m_axi_dma0_ARADDR;
    sc_out< sc_uint<C_M_AXI_DMA0_ID_WIDTH> > m_axi_dma0_ARID;
    sc_out< sc_lv<8> > m_axi_dma0_ARLEN;
    sc_out< sc_lv<3> > m_axi_dma0_ARSIZE;
    sc_out< sc_lv<2> > m_axi_dma0_ARBURST;
    sc_out< sc_lv<2> > m_axi_dma0_ARLOCK;
    sc_out< sc_lv<4> > m_axi_dma0_ARCACHE;
    sc_out< sc_lv<3> > m_axi_dma0_ARPROT;
    sc_out< sc_lv<4> > m_axi_dma0_ARQOS;
    sc_out< sc_lv<4> > m_axi_dma0_ARREGION;
    sc_out< sc_uint<C_M_AXI_DMA0_ARUSER_WIDTH> > m_axi_dma0_ARUSER;
    sc_in< sc_logic > m_axi_dma0_RVALID;
    sc_out< sc_logic > m_axi_dma0_RREADY;
    sc_in< sc_uint<C_M_AXI_DMA0_DATA_WIDTH> > m_axi_dma0_RDATA;
    sc_in< sc_logic > m_axi_dma0_RLAST;
    sc_in< sc_uint<C_M_AXI_DMA0_ID_WIDTH> > m_axi_dma0_RID;
    sc_in< sc_uint<C_M_AXI_DMA0_RUSER_WIDTH> > m_axi_dma0_RUSER;
    sc_in< sc_lv<2> > m_axi_dma0_RRESP;
    sc_in< sc_logic > m_axi_dma0_BVALID;
    sc_out< sc_logic > m_axi_dma0_BREADY;
    sc_in< sc_lv<2> > m_axi_dma0_BRESP;
    sc_in< sc_uint<C_M_AXI_DMA0_ID_WIDTH> > m_axi_dma0_BID;
    sc_in< sc_uint<C_M_AXI_DMA0_BUSER_WIDTH> > m_axi_dma0_BUSER;
    sc_out< sc_logic > m_axi_dma1_AWVALID;
    sc_in< sc_logic > m_axi_dma1_AWREADY;
    sc_out< sc_uint<C_M_AXI_DMA1_ADDR_WIDTH> > m_axi_dma1_AWADDR;
    sc_out< sc_uint<C_M_AXI_DMA1_ID_WIDTH> > m_axi_dma1_AWID;
    sc_out< sc_lv<8> > m_axi_dma1_AWLEN;
    sc_out< sc_lv<3> > m_axi_dma1_AWSIZE;
    sc_out< sc_lv<2> > m_axi_dma1_AWBURST;
    sc_out< sc_lv<2> > m_axi_dma1_AWLOCK;
    sc_out< sc_lv<4> > m_axi_dma1_AWCACHE;
    sc_out< sc_lv<3> > m_axi_dma1_AWPROT;
    sc_out< sc_lv<4> > m_axi_dma1_AWQOS;
    sc_out< sc_lv<4> > m_axi_dma1_AWREGION;
    sc_out< sc_uint<C_M_AXI_DMA1_AWUSER_WIDTH> > m_axi_dma1_AWUSER;
    sc_out< sc_logic > m_axi_dma1_WVALID;
    sc_in< sc_logic > m_axi_dma1_WREADY;
    sc_out< sc_uint<C_M_AXI_DMA1_DATA_WIDTH> > m_axi_dma1_WDATA;
    sc_out< sc_uint<C_M_AXI_DMA1_DATA_WIDTH/8> > m_axi_dma1_WSTRB;
    sc_out< sc_logic > m_axi_dma1_WLAST;
    sc_out< sc_uint<C_M_AXI_DMA1_ID_WIDTH> > m_axi_dma1_WID;
    sc_out< sc_uint<C_M_AXI_DMA1_WUSER_WIDTH> > m_axi_dma1_WUSER;
    sc_out< sc_logic > m_axi_dma1_ARVALID;
    sc_in< sc_logic > m_axi_dma1_ARREADY;
    sc_out< sc_uint<C_M_AXI_DMA1_ADDR_WIDTH> > m_axi_dma1_ARADDR;
    sc_out< sc_uint<C_M_AXI_DMA1_ID_WIDTH> > m_axi_dma1_ARID;
    sc_out< sc_lv<8> > m_axi_dma1_ARLEN;
    sc_out< sc_lv<3> > m_axi_dma1_ARSIZE;
    sc_out< sc_lv<2> > m_axi_dma1_ARBURST;
    sc_out< sc_lv<2> > m_axi_dma1_ARLOCK;
    sc_out< sc_lv<4> > m_axi_dma1_ARCACHE;
    sc_out< sc_lv<3> > m_axi_dma1_ARPROT;
    sc_out< sc_lv<4> > m_axi_dma1_ARQOS;
    sc_out< sc_lv<4> > m_axi_dma1_ARREGION;
    sc_out< sc_uint<C_M_AXI_DMA1_ARUSER_WIDTH> > m_axi_dma1_ARUSER;
    sc_in< sc_logic > m_axi_dma1_RVALID;
    sc_out< sc_logic > m_axi_dma1_RREADY;
    sc_in< sc_uint<C_M_AXI_DMA1_DATA_WIDTH> > m_axi_dma1_RDATA;
    sc_in< sc_logic > m_axi_dma1_RLAST;
    sc_in< sc_uint<C_M_AXI_DMA1_ID_WIDTH> > m_axi_dma1_RID;
    sc_in< sc_uint<C_M_AXI_DMA1_RUSER_WIDTH> > m_axi_dma1_RUSER;
    sc_in< sc_lv<2> > m_axi_dma1_RRESP;
    sc_in< sc_logic > m_axi_dma1_BVALID;
    sc_out< sc_logic > m_axi_dma1_BREADY;
    sc_in< sc_lv<2> > m_axi_dma1_BRESP;
    sc_in< sc_uint<C_M_AXI_DMA1_ID_WIDTH> > m_axi_dma1_BID;
    sc_in< sc_uint<C_M_AXI_DMA1_BUSER_WIDTH> > m_axi_dma1_BUSER;
    sc_in< sc_lv<1> > frame_trigger_V;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    dma_master_driver(sc_module_name name);
    SC_HAS_PROCESS(dma_master_driver);

    ~dma_master_driver();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    dma_master_driver_dma0_m_axi<0,32,32,5,16,16,16,16,C_M_AXI_DMA0_ID_WIDTH,C_M_AXI_DMA0_ADDR_WIDTH,C_M_AXI_DMA0_DATA_WIDTH,C_M_AXI_DMA0_AWUSER_WIDTH,C_M_AXI_DMA0_ARUSER_WIDTH,C_M_AXI_DMA0_WUSER_WIDTH,C_M_AXI_DMA0_RUSER_WIDTH,C_M_AXI_DMA0_BUSER_WIDTH,C_M_AXI_DMA0_TARGET_ADDR,C_M_AXI_DMA0_USER_VALUE,C_M_AXI_DMA0_PROT_VALUE,C_M_AXI_DMA0_CACHE_VALUE>* dma_master_driver_dma0_m_axi_U;
    transfer_chunk_1* grp_transfer_chunk_1_fu_87;
    transfer_chunk* grp_transfer_chunk_fu_95;
    dma_master_driverbkb<1,22,18,12,11>* dma_master_driverbkb_U11;
    dma_master_drivercud<1,1,20,18,38>* dma_master_drivercud_U12;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > dma0_AWVALID;
    sc_signal< sc_logic > dma0_AWREADY;
    sc_signal< sc_lv<32> > dma0_AWADDR;
    sc_signal< sc_lv<1> > dma0_AWID;
    sc_signal< sc_lv<32> > dma0_AWLEN;
    sc_signal< sc_lv<3> > dma0_AWSIZE;
    sc_signal< sc_lv<2> > dma0_AWBURST;
    sc_signal< sc_lv<2> > dma0_AWLOCK;
    sc_signal< sc_lv<4> > dma0_AWCACHE;
    sc_signal< sc_lv<3> > dma0_AWPROT;
    sc_signal< sc_lv<4> > dma0_AWQOS;
    sc_signal< sc_lv<4> > dma0_AWREGION;
    sc_signal< sc_lv<1> > dma0_AWUSER;
    sc_signal< sc_logic > dma0_WVALID;
    sc_signal< sc_logic > dma0_WREADY;
    sc_signal< sc_lv<32> > dma0_WDATA;
    sc_signal< sc_lv<4> > dma0_WSTRB;
    sc_signal< sc_logic > dma0_WLAST;
    sc_signal< sc_lv<1> > dma0_WID;
    sc_signal< sc_lv<1> > dma0_WUSER;
    sc_signal< sc_logic > dma0_ARVALID;
    sc_signal< sc_logic > dma0_ARREADY;
    sc_signal< sc_lv<32> > dma0_ARADDR;
    sc_signal< sc_lv<1> > dma0_ARID;
    sc_signal< sc_lv<32> > dma0_ARLEN;
    sc_signal< sc_lv<3> > dma0_ARSIZE;
    sc_signal< sc_lv<2> > dma0_ARBURST;
    sc_signal< sc_lv<2> > dma0_ARLOCK;
    sc_signal< sc_lv<4> > dma0_ARCACHE;
    sc_signal< sc_lv<3> > dma0_ARPROT;
    sc_signal< sc_lv<4> > dma0_ARQOS;
    sc_signal< sc_lv<4> > dma0_ARREGION;
    sc_signal< sc_lv<1> > dma0_ARUSER;
    sc_signal< sc_logic > dma0_RVALID;
    sc_signal< sc_logic > dma0_RREADY;
    sc_signal< sc_lv<32> > dma0_RDATA;
    sc_signal< sc_logic > dma0_RLAST;
    sc_signal< sc_lv<1> > dma0_RID;
    sc_signal< sc_lv<1> > dma0_RUSER;
    sc_signal< sc_lv<2> > dma0_RRESP;
    sc_signal< sc_logic > dma0_BVALID;
    sc_signal< sc_logic > dma0_BREADY;
    sc_signal< sc_lv<2> > dma0_BRESP;
    sc_signal< sc_lv<1> > dma0_BID;
    sc_signal< sc_lv<1> > dma0_BUSER;
    sc_signal< sc_lv<1> > frame_trigger_V_read_read_fu_70_p2;
    sc_signal< sc_lv<27> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<10> > chunk_ctr_1_fu_114_p2;
    sc_signal< sc_lv<10> > chunk_ctr_1_reg_175;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<18> > tmp_fu_120_p3;
    sc_signal< sc_lv<1> > exitcond_fu_108_p2;
    sc_signal< sc_lv<8> > tmp_1_reg_185;
    sc_signal< sc_lv<10> > input_row_fu_147_p3;
    sc_signal< sc_lv<10> > input_row_reg_190;
    sc_signal< sc_logic > ap_CS_fsm_state24;
    sc_signal< sc_lv<11> > tmp_2_fu_155_p1;
    sc_signal< sc_lv<11> > tmp_2_reg_196;
    sc_signal< sc_logic > grp_transfer_chunk_1_fu_87_ap_start;
    sc_signal< sc_logic > grp_transfer_chunk_1_fu_87_ap_done;
    sc_signal< sc_logic > grp_transfer_chunk_1_fu_87_ap_idle;
    sc_signal< sc_logic > grp_transfer_chunk_1_fu_87_ap_ready;
    sc_signal< sc_logic > grp_transfer_chunk_1_fu_87_m_axi_dma_AWVALID;
    sc_signal< sc_lv<32> > grp_transfer_chunk_1_fu_87_m_axi_dma_AWADDR;
    sc_signal< sc_lv<1> > grp_transfer_chunk_1_fu_87_m_axi_dma_AWID;
    sc_signal< sc_lv<32> > grp_transfer_chunk_1_fu_87_m_axi_dma_AWLEN;
    sc_signal< sc_lv<3> > grp_transfer_chunk_1_fu_87_m_axi_dma_AWSIZE;
    sc_signal< sc_lv<2> > grp_transfer_chunk_1_fu_87_m_axi_dma_AWBURST;
    sc_signal< sc_lv<2> > grp_transfer_chunk_1_fu_87_m_axi_dma_AWLOCK;
    sc_signal< sc_lv<4> > grp_transfer_chunk_1_fu_87_m_axi_dma_AWCACHE;
    sc_signal< sc_lv<3> > grp_transfer_chunk_1_fu_87_m_axi_dma_AWPROT;
    sc_signal< sc_lv<4> > grp_transfer_chunk_1_fu_87_m_axi_dma_AWQOS;
    sc_signal< sc_lv<4> > grp_transfer_chunk_1_fu_87_m_axi_dma_AWREGION;
    sc_signal< sc_lv<1> > grp_transfer_chunk_1_fu_87_m_axi_dma_AWUSER;
    sc_signal< sc_logic > grp_transfer_chunk_1_fu_87_m_axi_dma_WVALID;
    sc_signal< sc_lv<32> > grp_transfer_chunk_1_fu_87_m_axi_dma_WDATA;
    sc_signal< sc_lv<4> > grp_transfer_chunk_1_fu_87_m_axi_dma_WSTRB;
    sc_signal< sc_logic > grp_transfer_chunk_1_fu_87_m_axi_dma_WLAST;
    sc_signal< sc_lv<1> > grp_transfer_chunk_1_fu_87_m_axi_dma_WID;
    sc_signal< sc_lv<1> > grp_transfer_chunk_1_fu_87_m_axi_dma_WUSER;
    sc_signal< sc_logic > grp_transfer_chunk_1_fu_87_m_axi_dma_ARVALID;
    sc_signal< sc_lv<32> > grp_transfer_chunk_1_fu_87_m_axi_dma_ARADDR;
    sc_signal< sc_lv<1> > grp_transfer_chunk_1_fu_87_m_axi_dma_ARID;
    sc_signal< sc_lv<32> > grp_transfer_chunk_1_fu_87_m_axi_dma_ARLEN;
    sc_signal< sc_lv<3> > grp_transfer_chunk_1_fu_87_m_axi_dma_ARSIZE;
    sc_signal< sc_lv<2> > grp_transfer_chunk_1_fu_87_m_axi_dma_ARBURST;
    sc_signal< sc_lv<2> > grp_transfer_chunk_1_fu_87_m_axi_dma_ARLOCK;
    sc_signal< sc_lv<4> > grp_transfer_chunk_1_fu_87_m_axi_dma_ARCACHE;
    sc_signal< sc_lv<3> > grp_transfer_chunk_1_fu_87_m_axi_dma_ARPROT;
    sc_signal< sc_lv<4> > grp_transfer_chunk_1_fu_87_m_axi_dma_ARQOS;
    sc_signal< sc_lv<4> > grp_transfer_chunk_1_fu_87_m_axi_dma_ARREGION;
    sc_signal< sc_lv<1> > grp_transfer_chunk_1_fu_87_m_axi_dma_ARUSER;
    sc_signal< sc_logic > grp_transfer_chunk_1_fu_87_m_axi_dma_RREADY;
    sc_signal< sc_logic > grp_transfer_chunk_1_fu_87_m_axi_dma_BREADY;
    sc_signal< sc_logic > grp_transfer_chunk_fu_95_ap_start;
    sc_signal< sc_logic > grp_transfer_chunk_fu_95_ap_done;
    sc_signal< sc_logic > grp_transfer_chunk_fu_95_ap_idle;
    sc_signal< sc_logic > grp_transfer_chunk_fu_95_ap_ready;
    sc_signal< sc_logic > grp_transfer_chunk_fu_95_m_axi_dma_AWVALID;
    sc_signal< sc_lv<32> > grp_transfer_chunk_fu_95_m_axi_dma_AWADDR;
    sc_signal< sc_lv<1> > grp_transfer_chunk_fu_95_m_axi_dma_AWID;
    sc_signal< sc_lv<32> > grp_transfer_chunk_fu_95_m_axi_dma_AWLEN;
    sc_signal< sc_lv<3> > grp_transfer_chunk_fu_95_m_axi_dma_AWSIZE;
    sc_signal< sc_lv<2> > grp_transfer_chunk_fu_95_m_axi_dma_AWBURST;
    sc_signal< sc_lv<2> > grp_transfer_chunk_fu_95_m_axi_dma_AWLOCK;
    sc_signal< sc_lv<4> > grp_transfer_chunk_fu_95_m_axi_dma_AWCACHE;
    sc_signal< sc_lv<3> > grp_transfer_chunk_fu_95_m_axi_dma_AWPROT;
    sc_signal< sc_lv<4> > grp_transfer_chunk_fu_95_m_axi_dma_AWQOS;
    sc_signal< sc_lv<4> > grp_transfer_chunk_fu_95_m_axi_dma_AWREGION;
    sc_signal< sc_lv<1> > grp_transfer_chunk_fu_95_m_axi_dma_AWUSER;
    sc_signal< sc_logic > grp_transfer_chunk_fu_95_m_axi_dma_WVALID;
    sc_signal< sc_lv<32> > grp_transfer_chunk_fu_95_m_axi_dma_WDATA;
    sc_signal< sc_lv<4> > grp_transfer_chunk_fu_95_m_axi_dma_WSTRB;
    sc_signal< sc_logic > grp_transfer_chunk_fu_95_m_axi_dma_WLAST;
    sc_signal< sc_lv<1> > grp_transfer_chunk_fu_95_m_axi_dma_WID;
    sc_signal< sc_lv<1> > grp_transfer_chunk_fu_95_m_axi_dma_WUSER;
    sc_signal< sc_logic > grp_transfer_chunk_fu_95_m_axi_dma_ARVALID;
    sc_signal< sc_lv<32> > grp_transfer_chunk_fu_95_m_axi_dma_ARADDR;
    sc_signal< sc_lv<1> > grp_transfer_chunk_fu_95_m_axi_dma_ARID;
    sc_signal< sc_lv<32> > grp_transfer_chunk_fu_95_m_axi_dma_ARLEN;
    sc_signal< sc_lv<3> > grp_transfer_chunk_fu_95_m_axi_dma_ARSIZE;
    sc_signal< sc_lv<2> > grp_transfer_chunk_fu_95_m_axi_dma_ARBURST;
    sc_signal< sc_lv<2> > grp_transfer_chunk_fu_95_m_axi_dma_ARLOCK;
    sc_signal< sc_lv<4> > grp_transfer_chunk_fu_95_m_axi_dma_ARCACHE;
    sc_signal< sc_lv<3> > grp_transfer_chunk_fu_95_m_axi_dma_ARPROT;
    sc_signal< sc_lv<4> > grp_transfer_chunk_fu_95_m_axi_dma_ARQOS;
    sc_signal< sc_lv<4> > grp_transfer_chunk_fu_95_m_axi_dma_ARREGION;
    sc_signal< sc_lv<1> > grp_transfer_chunk_fu_95_m_axi_dma_ARUSER;
    sc_signal< sc_logic > grp_transfer_chunk_fu_95_m_axi_dma_RREADY;
    sc_signal< sc_logic > grp_transfer_chunk_fu_95_m_axi_dma_BREADY;
    sc_signal< sc_lv<10> > chunk_ctr_reg_76;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > ap_CS_fsm_state27;
    sc_signal< sc_logic > grp_transfer_chunk_1_fu_87_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state25;
    sc_signal< sc_logic > grp_transfer_chunk_fu_95_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state26;
    sc_signal< sc_lv<38> > mul_fu_160_p2;
    sc_signal< sc_lv<12> > grp_fu_141_p1;
    sc_signal< sc_lv<11> > grp_fu_141_p2;
    sc_signal< sc_lv<20> > mul_fu_160_p0;
    sc_signal< sc_lv<18> > mul_fu_160_p1;
    sc_signal< sc_logic > grp_fu_141_ap_start;
    sc_signal< sc_logic > grp_fu_141_ap_done;
    sc_signal< sc_lv<27> > ap_NS_fsm;
    sc_signal< sc_lv<38> > mul_fu_160_p10;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<27> ap_ST_fsm_state1;
    static const sc_lv<27> ap_ST_fsm_state2;
    static const sc_lv<27> ap_ST_fsm_state3;
    static const sc_lv<27> ap_ST_fsm_state4;
    static const sc_lv<27> ap_ST_fsm_state5;
    static const sc_lv<27> ap_ST_fsm_state6;
    static const sc_lv<27> ap_ST_fsm_state7;
    static const sc_lv<27> ap_ST_fsm_state8;
    static const sc_lv<27> ap_ST_fsm_state9;
    static const sc_lv<27> ap_ST_fsm_state10;
    static const sc_lv<27> ap_ST_fsm_state11;
    static const sc_lv<27> ap_ST_fsm_state12;
    static const sc_lv<27> ap_ST_fsm_state13;
    static const sc_lv<27> ap_ST_fsm_state14;
    static const sc_lv<27> ap_ST_fsm_state15;
    static const sc_lv<27> ap_ST_fsm_state16;
    static const sc_lv<27> ap_ST_fsm_state17;
    static const sc_lv<27> ap_ST_fsm_state18;
    static const sc_lv<27> ap_ST_fsm_state19;
    static const sc_lv<27> ap_ST_fsm_state20;
    static const sc_lv<27> ap_ST_fsm_state21;
    static const sc_lv<27> ap_ST_fsm_state22;
    static const sc_lv<27> ap_ST_fsm_state23;
    static const sc_lv<27> ap_ST_fsm_state24;
    static const sc_lv<27> ap_ST_fsm_state25;
    static const sc_lv<27> ap_ST_fsm_state26;
    static const sc_lv<27> ap_ST_fsm_state27;
    static const int C_M_AXI_DMA0_TARGET_ADDR;
    static const int C_M_AXI_DMA0_USER_VALUE;
    static const int C_M_AXI_DMA0_PROT_VALUE;
    static const int C_M_AXI_DMA0_CACHE_VALUE;
    static const int C_M_AXI_DATA_WIDTH;
    static const int C_M_AXI_DMA1_TARGET_ADDR;
    static const int C_M_AXI_DMA1_USER_VALUE;
    static const int C_M_AXI_DMA1_PROT_VALUE;
    static const int C_M_AXI_DMA1_CACHE_VALUE;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_1A;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<32> ap_const_lv32_19;
    static const sc_lv<10> ap_const_lv10_384;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<32> ap_const_lv32_1D;
    static const sc_lv<32> ap_const_lv32_24;
    static const sc_lv<18> ap_const_lv18_500;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<38> ap_const_lv38_66667;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state24();
    void thread_ap_CS_fsm_state25();
    void thread_ap_CS_fsm_state26();
    void thread_ap_CS_fsm_state27();
    void thread_ap_CS_fsm_state3();
    void thread_ap_rst_n_inv();
    void thread_chunk_ctr_1_fu_114_p2();
    void thread_dma0_ARADDR();
    void thread_dma0_ARBURST();
    void thread_dma0_ARCACHE();
    void thread_dma0_ARID();
    void thread_dma0_ARLEN();
    void thread_dma0_ARLOCK();
    void thread_dma0_ARPROT();
    void thread_dma0_ARQOS();
    void thread_dma0_ARREGION();
    void thread_dma0_ARSIZE();
    void thread_dma0_ARUSER();
    void thread_dma0_ARVALID();
    void thread_dma0_AWADDR();
    void thread_dma0_AWBURST();
    void thread_dma0_AWCACHE();
    void thread_dma0_AWID();
    void thread_dma0_AWLEN();
    void thread_dma0_AWLOCK();
    void thread_dma0_AWPROT();
    void thread_dma0_AWQOS();
    void thread_dma0_AWREGION();
    void thread_dma0_AWSIZE();
    void thread_dma0_AWUSER();
    void thread_dma0_AWVALID();
    void thread_dma0_BREADY();
    void thread_dma0_RREADY();
    void thread_dma0_WDATA();
    void thread_dma0_WID();
    void thread_dma0_WLAST();
    void thread_dma0_WSTRB();
    void thread_dma0_WUSER();
    void thread_dma0_WVALID();
    void thread_exitcond_fu_108_p2();
    void thread_frame_trigger_V_read_read_fu_70_p2();
    void thread_grp_fu_141_ap_start();
    void thread_grp_fu_141_p1();
    void thread_grp_transfer_chunk_1_fu_87_ap_start();
    void thread_grp_transfer_chunk_fu_95_ap_start();
    void thread_input_row_fu_147_p3();
    void thread_m_axi_dma1_ARADDR();
    void thread_m_axi_dma1_ARBURST();
    void thread_m_axi_dma1_ARCACHE();
    void thread_m_axi_dma1_ARID();
    void thread_m_axi_dma1_ARLEN();
    void thread_m_axi_dma1_ARLOCK();
    void thread_m_axi_dma1_ARPROT();
    void thread_m_axi_dma1_ARQOS();
    void thread_m_axi_dma1_ARREGION();
    void thread_m_axi_dma1_ARSIZE();
    void thread_m_axi_dma1_ARUSER();
    void thread_m_axi_dma1_ARVALID();
    void thread_m_axi_dma1_AWADDR();
    void thread_m_axi_dma1_AWBURST();
    void thread_m_axi_dma1_AWCACHE();
    void thread_m_axi_dma1_AWID();
    void thread_m_axi_dma1_AWLEN();
    void thread_m_axi_dma1_AWLOCK();
    void thread_m_axi_dma1_AWPROT();
    void thread_m_axi_dma1_AWQOS();
    void thread_m_axi_dma1_AWREGION();
    void thread_m_axi_dma1_AWSIZE();
    void thread_m_axi_dma1_AWUSER();
    void thread_m_axi_dma1_AWVALID();
    void thread_m_axi_dma1_BREADY();
    void thread_m_axi_dma1_RREADY();
    void thread_m_axi_dma1_WDATA();
    void thread_m_axi_dma1_WID();
    void thread_m_axi_dma1_WLAST();
    void thread_m_axi_dma1_WSTRB();
    void thread_m_axi_dma1_WUSER();
    void thread_m_axi_dma1_WVALID();
    void thread_mul_fu_160_p0();
    void thread_mul_fu_160_p1();
    void thread_mul_fu_160_p10();
    void thread_tmp_2_fu_155_p1();
    void thread_tmp_fu_120_p3();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
